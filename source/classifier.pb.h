// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: classifier.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_classifier_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_classifier_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_classifier_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_classifier_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_classifier_2eproto;
namespace classifierpb {
class ClusterID;
struct ClusterIDDefaultTypeInternal;
extern ClusterIDDefaultTypeInternal _ClusterID_default_instance_;
class LabeledVertexEntry;
struct LabeledVertexEntryDefaultTypeInternal;
extern LabeledVertexEntryDefaultTypeInternal _LabeledVertexEntry_default_instance_;
class LabeledVertices;
struct LabeledVerticesDefaultTypeInternal;
extern LabeledVerticesDefaultTypeInternal _LabeledVertices_default_instance_;
class SupportVertexEntry;
struct SupportVertexEntryDefaultTypeInternal;
extern SupportVertexEntryDefaultTypeInternal _SupportVertexEntry_default_instance_;
class SupportVertices;
struct SupportVerticesDefaultTypeInternal;
extern SupportVerticesDefaultTypeInternal _SupportVertices_default_instance_;
class TrainingDataset;
struct TrainingDatasetDefaultTypeInternal;
extern TrainingDatasetDefaultTypeInternal _TrainingDataset_default_instance_;
class TrainingDatasetEntry;
struct TrainingDatasetEntryDefaultTypeInternal;
extern TrainingDatasetEntryDefaultTypeInternal _TrainingDatasetEntry_default_instance_;
class VertexToLabelEntry;
struct VertexToLabelEntryDefaultTypeInternal;
extern VertexToLabelEntryDefaultTypeInternal _VertexToLabelEntry_default_instance_;
class VerticesToLabel;
struct VerticesToLabelDefaultTypeInternal;
extern VerticesToLabelDefaultTypeInternal _VerticesToLabel_default_instance_;
}  // namespace classifierpb
PROTOBUF_NAMESPACE_OPEN
template<> ::classifierpb::ClusterID* Arena::CreateMaybeMessage<::classifierpb::ClusterID>(Arena*);
template<> ::classifierpb::LabeledVertexEntry* Arena::CreateMaybeMessage<::classifierpb::LabeledVertexEntry>(Arena*);
template<> ::classifierpb::LabeledVertices* Arena::CreateMaybeMessage<::classifierpb::LabeledVertices>(Arena*);
template<> ::classifierpb::SupportVertexEntry* Arena::CreateMaybeMessage<::classifierpb::SupportVertexEntry>(Arena*);
template<> ::classifierpb::SupportVertices* Arena::CreateMaybeMessage<::classifierpb::SupportVertices>(Arena*);
template<> ::classifierpb::TrainingDataset* Arena::CreateMaybeMessage<::classifierpb::TrainingDataset>(Arena*);
template<> ::classifierpb::TrainingDatasetEntry* Arena::CreateMaybeMessage<::classifierpb::TrainingDatasetEntry>(Arena*);
template<> ::classifierpb::VertexToLabelEntry* Arena::CreateMaybeMessage<::classifierpb::VertexToLabelEntry>(Arena*);
template<> ::classifierpb::VerticesToLabel* Arena::CreateMaybeMessage<::classifierpb::VerticesToLabel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace classifierpb {

// ===================================================================

class ClusterID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:classifierpb.ClusterID) */ {
 public:
  inline ClusterID() : ClusterID(nullptr) {}
  ~ClusterID() override;
  explicit PROTOBUF_CONSTEXPR ClusterID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClusterID(const ClusterID& from);
  ClusterID(ClusterID&& from) noexcept
    : ClusterID() {
    *this = ::std::move(from);
  }

  inline ClusterID& operator=(const ClusterID& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClusterID& operator=(ClusterID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClusterID& default_instance() {
    return *internal_default_instance();
  }
  enum ClusterIdCase {
    kClusterIdInt = 1,
    kClusterIdStr = 2,
    CLUSTER_ID_NOT_SET = 0,
  };

  static inline const ClusterID* internal_default_instance() {
    return reinterpret_cast<const ClusterID*>(
               &_ClusterID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClusterID& a, ClusterID& b) {
    a.Swap(&b);
  }
  inline void Swap(ClusterID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClusterID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClusterID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClusterID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClusterID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClusterID& from) {
    ClusterID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "classifierpb.ClusterID";
  }
  protected:
  explicit ClusterID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClusterIdIntFieldNumber = 1,
    kClusterIdStrFieldNumber = 2,
  };
  // int32 cluster_id_int = 1;
  bool has_cluster_id_int() const;
  private:
  bool _internal_has_cluster_id_int() const;
  public:
  void clear_cluster_id_int();
  int32_t cluster_id_int() const;
  void set_cluster_id_int(int32_t value);
  private:
  int32_t _internal_cluster_id_int() const;
  void _internal_set_cluster_id_int(int32_t value);
  public:

  // string cluster_id_str = 2;
  bool has_cluster_id_str() const;
  private:
  bool _internal_has_cluster_id_str() const;
  public:
  void clear_cluster_id_str();
  const std::string& cluster_id_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cluster_id_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cluster_id_str();
  PROTOBUF_NODISCARD std::string* release_cluster_id_str();
  void set_allocated_cluster_id_str(std::string* cluster_id_str);
  private:
  const std::string& _internal_cluster_id_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cluster_id_str(const std::string& value);
  std::string* _internal_mutable_cluster_id_str();
  public:

  void clear_cluster_id();
  ClusterIdCase cluster_id_case() const;
  // @@protoc_insertion_point(class_scope:classifierpb.ClusterID)
 private:
  class _Internal;
  void set_has_cluster_id_int();
  void set_has_cluster_id_str();

  inline bool has_cluster_id() const;
  inline void clear_has_cluster_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ClusterIdUnion {
      constexpr ClusterIdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int32_t cluster_id_int_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cluster_id_str_;
    } cluster_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_classifier_2eproto;
};
// -------------------------------------------------------------------

class TrainingDatasetEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:classifierpb.TrainingDatasetEntry) */ {
 public:
  inline TrainingDatasetEntry() : TrainingDatasetEntry(nullptr) {}
  ~TrainingDatasetEntry() override;
  explicit PROTOBUF_CONSTEXPR TrainingDatasetEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrainingDatasetEntry(const TrainingDatasetEntry& from);
  TrainingDatasetEntry(TrainingDatasetEntry&& from) noexcept
    : TrainingDatasetEntry() {
    *this = ::std::move(from);
  }

  inline TrainingDatasetEntry& operator=(const TrainingDatasetEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainingDatasetEntry& operator=(TrainingDatasetEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrainingDatasetEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrainingDatasetEntry* internal_default_instance() {
    return reinterpret_cast<const TrainingDatasetEntry*>(
               &_TrainingDatasetEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrainingDatasetEntry& a, TrainingDatasetEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainingDatasetEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainingDatasetEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrainingDatasetEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrainingDatasetEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrainingDatasetEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrainingDatasetEntry& from) {
    TrainingDatasetEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainingDatasetEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "classifierpb.TrainingDatasetEntry";
  }
  protected:
  explicit TrainingDatasetEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 1,
    kClusterIdFieldNumber = 2,
  };
  // repeated float features = 1;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  float _internal_features(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_features() const;
  void _internal_add_features(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_features();
  public:
  float features(int index) const;
  void set_features(int index, float value);
  void add_features(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_features();

  // .classifierpb.ClusterID cluster_id = 2;
  bool has_cluster_id() const;
  private:
  bool _internal_has_cluster_id() const;
  public:
  void clear_cluster_id();
  const ::classifierpb::ClusterID& cluster_id() const;
  PROTOBUF_NODISCARD ::classifierpb::ClusterID* release_cluster_id();
  ::classifierpb::ClusterID* mutable_cluster_id();
  void set_allocated_cluster_id(::classifierpb::ClusterID* cluster_id);
  private:
  const ::classifierpb::ClusterID& _internal_cluster_id() const;
  ::classifierpb::ClusterID* _internal_mutable_cluster_id();
  public:
  void unsafe_arena_set_allocated_cluster_id(
      ::classifierpb::ClusterID* cluster_id);
  ::classifierpb::ClusterID* unsafe_arena_release_cluster_id();

  // @@protoc_insertion_point(class_scope:classifierpb.TrainingDatasetEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > features_;
    ::classifierpb::ClusterID* cluster_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_classifier_2eproto;
};
// -------------------------------------------------------------------

class TrainingDataset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:classifierpb.TrainingDataset) */ {
 public:
  inline TrainingDataset() : TrainingDataset(nullptr) {}
  ~TrainingDataset() override;
  explicit PROTOBUF_CONSTEXPR TrainingDataset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrainingDataset(const TrainingDataset& from);
  TrainingDataset(TrainingDataset&& from) noexcept
    : TrainingDataset() {
    *this = ::std::move(from);
  }

  inline TrainingDataset& operator=(const TrainingDataset& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainingDataset& operator=(TrainingDataset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrainingDataset& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrainingDataset* internal_default_instance() {
    return reinterpret_cast<const TrainingDataset*>(
               &_TrainingDataset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrainingDataset& a, TrainingDataset& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainingDataset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainingDataset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrainingDataset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrainingDataset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrainingDataset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrainingDataset& from) {
    TrainingDataset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainingDataset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "classifierpb.TrainingDataset";
  }
  protected:
  explicit TrainingDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .classifierpb.TrainingDatasetEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::classifierpb::TrainingDatasetEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::TrainingDatasetEntry >*
      mutable_entries();
  private:
  const ::classifierpb::TrainingDatasetEntry& _internal_entries(int index) const;
  ::classifierpb::TrainingDatasetEntry* _internal_add_entries();
  public:
  const ::classifierpb::TrainingDatasetEntry& entries(int index) const;
  ::classifierpb::TrainingDatasetEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::TrainingDatasetEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:classifierpb.TrainingDataset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::TrainingDatasetEntry > entries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_classifier_2eproto;
};
// -------------------------------------------------------------------

class SupportVertexEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:classifierpb.SupportVertexEntry) */ {
 public:
  inline SupportVertexEntry() : SupportVertexEntry(nullptr) {}
  ~SupportVertexEntry() override;
  explicit PROTOBUF_CONSTEXPR SupportVertexEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SupportVertexEntry(const SupportVertexEntry& from);
  SupportVertexEntry(SupportVertexEntry&& from) noexcept
    : SupportVertexEntry() {
    *this = ::std::move(from);
  }

  inline SupportVertexEntry& operator=(const SupportVertexEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupportVertexEntry& operator=(SupportVertexEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SupportVertexEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const SupportVertexEntry* internal_default_instance() {
    return reinterpret_cast<const SupportVertexEntry*>(
               &_SupportVertexEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SupportVertexEntry& a, SupportVertexEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SupportVertexEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SupportVertexEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SupportVertexEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SupportVertexEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SupportVertexEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SupportVertexEntry& from) {
    SupportVertexEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupportVertexEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "classifierpb.SupportVertexEntry";
  }
  protected:
  explicit SupportVertexEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 2,
    kClusterIdFieldNumber = 3,
    kVertexIdFieldNumber = 1,
  };
  // repeated float features = 2;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  float _internal_features(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_features() const;
  void _internal_add_features(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_features();
  public:
  float features(int index) const;
  void set_features(int index, float value);
  void add_features(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_features();

  // .classifierpb.ClusterID cluster_id = 3;
  bool has_cluster_id() const;
  private:
  bool _internal_has_cluster_id() const;
  public:
  void clear_cluster_id();
  const ::classifierpb::ClusterID& cluster_id() const;
  PROTOBUF_NODISCARD ::classifierpb::ClusterID* release_cluster_id();
  ::classifierpb::ClusterID* mutable_cluster_id();
  void set_allocated_cluster_id(::classifierpb::ClusterID* cluster_id);
  private:
  const ::classifierpb::ClusterID& _internal_cluster_id() const;
  ::classifierpb::ClusterID* _internal_mutable_cluster_id();
  public:
  void unsafe_arena_set_allocated_cluster_id(
      ::classifierpb::ClusterID* cluster_id);
  ::classifierpb::ClusterID* unsafe_arena_release_cluster_id();

  // int32 vertex_id = 1;
  void clear_vertex_id();
  int32_t vertex_id() const;
  void set_vertex_id(int32_t value);
  private:
  int32_t _internal_vertex_id() const;
  void _internal_set_vertex_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:classifierpb.SupportVertexEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > features_;
    ::classifierpb::ClusterID* cluster_id_;
    int32_t vertex_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_classifier_2eproto;
};
// -------------------------------------------------------------------

class SupportVertices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:classifierpb.SupportVertices) */ {
 public:
  inline SupportVertices() : SupportVertices(nullptr) {}
  ~SupportVertices() override;
  explicit PROTOBUF_CONSTEXPR SupportVertices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SupportVertices(const SupportVertices& from);
  SupportVertices(SupportVertices&& from) noexcept
    : SupportVertices() {
    *this = ::std::move(from);
  }

  inline SupportVertices& operator=(const SupportVertices& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupportVertices& operator=(SupportVertices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SupportVertices& default_instance() {
    return *internal_default_instance();
  }
  static inline const SupportVertices* internal_default_instance() {
    return reinterpret_cast<const SupportVertices*>(
               &_SupportVertices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SupportVertices& a, SupportVertices& b) {
    a.Swap(&b);
  }
  inline void Swap(SupportVertices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SupportVertices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SupportVertices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SupportVertices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SupportVertices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SupportVertices& from) {
    SupportVertices::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupportVertices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "classifierpb.SupportVertices";
  }
  protected:
  explicit SupportVertices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .classifierpb.SupportVertexEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::classifierpb::SupportVertexEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::SupportVertexEntry >*
      mutable_entries();
  private:
  const ::classifierpb::SupportVertexEntry& _internal_entries(int index) const;
  ::classifierpb::SupportVertexEntry* _internal_add_entries();
  public:
  const ::classifierpb::SupportVertexEntry& entries(int index) const;
  ::classifierpb::SupportVertexEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::SupportVertexEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:classifierpb.SupportVertices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::SupportVertexEntry > entries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_classifier_2eproto;
};
// -------------------------------------------------------------------

class VertexToLabelEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:classifierpb.VertexToLabelEntry) */ {
 public:
  inline VertexToLabelEntry() : VertexToLabelEntry(nullptr) {}
  ~VertexToLabelEntry() override;
  explicit PROTOBUF_CONSTEXPR VertexToLabelEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VertexToLabelEntry(const VertexToLabelEntry& from);
  VertexToLabelEntry(VertexToLabelEntry&& from) noexcept
    : VertexToLabelEntry() {
    *this = ::std::move(from);
  }

  inline VertexToLabelEntry& operator=(const VertexToLabelEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexToLabelEntry& operator=(VertexToLabelEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VertexToLabelEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const VertexToLabelEntry* internal_default_instance() {
    return reinterpret_cast<const VertexToLabelEntry*>(
               &_VertexToLabelEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VertexToLabelEntry& a, VertexToLabelEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexToLabelEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VertexToLabelEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VertexToLabelEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VertexToLabelEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VertexToLabelEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VertexToLabelEntry& from) {
    VertexToLabelEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexToLabelEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "classifierpb.VertexToLabelEntry";
  }
  protected:
  explicit VertexToLabelEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 2,
    kExpectedClusterIdFieldNumber = 3,
    kVertexIdFieldNumber = 1,
  };
  // repeated float features = 2;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  float _internal_features(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_features() const;
  void _internal_add_features(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_features();
  public:
  float features(int index) const;
  void set_features(int index, float value);
  void add_features(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_features();

  // .classifierpb.ClusterID expected_cluster_id = 3;
  bool has_expected_cluster_id() const;
  private:
  bool _internal_has_expected_cluster_id() const;
  public:
  void clear_expected_cluster_id();
  const ::classifierpb::ClusterID& expected_cluster_id() const;
  PROTOBUF_NODISCARD ::classifierpb::ClusterID* release_expected_cluster_id();
  ::classifierpb::ClusterID* mutable_expected_cluster_id();
  void set_allocated_expected_cluster_id(::classifierpb::ClusterID* expected_cluster_id);
  private:
  const ::classifierpb::ClusterID& _internal_expected_cluster_id() const;
  ::classifierpb::ClusterID* _internal_mutable_expected_cluster_id();
  public:
  void unsafe_arena_set_allocated_expected_cluster_id(
      ::classifierpb::ClusterID* expected_cluster_id);
  ::classifierpb::ClusterID* unsafe_arena_release_expected_cluster_id();

  // int32 vertex_id = 1;
  void clear_vertex_id();
  int32_t vertex_id() const;
  void set_vertex_id(int32_t value);
  private:
  int32_t _internal_vertex_id() const;
  void _internal_set_vertex_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:classifierpb.VertexToLabelEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > features_;
    ::classifierpb::ClusterID* expected_cluster_id_;
    int32_t vertex_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_classifier_2eproto;
};
// -------------------------------------------------------------------

class VerticesToLabel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:classifierpb.VerticesToLabel) */ {
 public:
  inline VerticesToLabel() : VerticesToLabel(nullptr) {}
  ~VerticesToLabel() override;
  explicit PROTOBUF_CONSTEXPR VerticesToLabel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerticesToLabel(const VerticesToLabel& from);
  VerticesToLabel(VerticesToLabel&& from) noexcept
    : VerticesToLabel() {
    *this = ::std::move(from);
  }

  inline VerticesToLabel& operator=(const VerticesToLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerticesToLabel& operator=(VerticesToLabel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerticesToLabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerticesToLabel* internal_default_instance() {
    return reinterpret_cast<const VerticesToLabel*>(
               &_VerticesToLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VerticesToLabel& a, VerticesToLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(VerticesToLabel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerticesToLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerticesToLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VerticesToLabel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VerticesToLabel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VerticesToLabel& from) {
    VerticesToLabel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerticesToLabel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "classifierpb.VerticesToLabel";
  }
  protected:
  explicit VerticesToLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .classifierpb.VertexToLabelEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::classifierpb::VertexToLabelEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::VertexToLabelEntry >*
      mutable_entries();
  private:
  const ::classifierpb::VertexToLabelEntry& _internal_entries(int index) const;
  ::classifierpb::VertexToLabelEntry* _internal_add_entries();
  public:
  const ::classifierpb::VertexToLabelEntry& entries(int index) const;
  ::classifierpb::VertexToLabelEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::VertexToLabelEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:classifierpb.VerticesToLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::VertexToLabelEntry > entries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_classifier_2eproto;
};
// -------------------------------------------------------------------

class LabeledVertexEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:classifierpb.LabeledVertexEntry) */ {
 public:
  inline LabeledVertexEntry() : LabeledVertexEntry(nullptr) {}
  ~LabeledVertexEntry() override;
  explicit PROTOBUF_CONSTEXPR LabeledVertexEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LabeledVertexEntry(const LabeledVertexEntry& from);
  LabeledVertexEntry(LabeledVertexEntry&& from) noexcept
    : LabeledVertexEntry() {
    *this = ::std::move(from);
  }

  inline LabeledVertexEntry& operator=(const LabeledVertexEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabeledVertexEntry& operator=(LabeledVertexEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LabeledVertexEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const LabeledVertexEntry* internal_default_instance() {
    return reinterpret_cast<const LabeledVertexEntry*>(
               &_LabeledVertexEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LabeledVertexEntry& a, LabeledVertexEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LabeledVertexEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabeledVertexEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LabeledVertexEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LabeledVertexEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LabeledVertexEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LabeledVertexEntry& from) {
    LabeledVertexEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabeledVertexEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "classifierpb.LabeledVertexEntry";
  }
  protected:
  explicit LabeledVertexEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 2,
    kClusterIdFieldNumber = 3,
    kVertexIdFieldNumber = 1,
  };
  // repeated float features = 2;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  float _internal_features(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_features() const;
  void _internal_add_features(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_features();
  public:
  float features(int index) const;
  void set_features(int index, float value);
  void add_features(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_features();

  // .classifierpb.ClusterID cluster_id = 3;
  bool has_cluster_id() const;
  private:
  bool _internal_has_cluster_id() const;
  public:
  void clear_cluster_id();
  const ::classifierpb::ClusterID& cluster_id() const;
  PROTOBUF_NODISCARD ::classifierpb::ClusterID* release_cluster_id();
  ::classifierpb::ClusterID* mutable_cluster_id();
  void set_allocated_cluster_id(::classifierpb::ClusterID* cluster_id);
  private:
  const ::classifierpb::ClusterID& _internal_cluster_id() const;
  ::classifierpb::ClusterID* _internal_mutable_cluster_id();
  public:
  void unsafe_arena_set_allocated_cluster_id(
      ::classifierpb::ClusterID* cluster_id);
  ::classifierpb::ClusterID* unsafe_arena_release_cluster_id();

  // int32 vertex_id = 1;
  void clear_vertex_id();
  int32_t vertex_id() const;
  void set_vertex_id(int32_t value);
  private:
  int32_t _internal_vertex_id() const;
  void _internal_set_vertex_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:classifierpb.LabeledVertexEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > features_;
    ::classifierpb::ClusterID* cluster_id_;
    int32_t vertex_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_classifier_2eproto;
};
// -------------------------------------------------------------------

class LabeledVertices final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:classifierpb.LabeledVertices) */ {
 public:
  inline LabeledVertices() : LabeledVertices(nullptr) {}
  ~LabeledVertices() override;
  explicit PROTOBUF_CONSTEXPR LabeledVertices(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LabeledVertices(const LabeledVertices& from);
  LabeledVertices(LabeledVertices&& from) noexcept
    : LabeledVertices() {
    *this = ::std::move(from);
  }

  inline LabeledVertices& operator=(const LabeledVertices& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabeledVertices& operator=(LabeledVertices&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LabeledVertices& default_instance() {
    return *internal_default_instance();
  }
  static inline const LabeledVertices* internal_default_instance() {
    return reinterpret_cast<const LabeledVertices*>(
               &_LabeledVertices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LabeledVertices& a, LabeledVertices& b) {
    a.Swap(&b);
  }
  inline void Swap(LabeledVertices* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabeledVertices* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LabeledVertices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LabeledVertices>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LabeledVertices& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LabeledVertices& from) {
    LabeledVertices::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabeledVertices* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "classifierpb.LabeledVertices";
  }
  protected:
  explicit LabeledVertices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .classifierpb.LabeledVertexEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::classifierpb::LabeledVertexEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::LabeledVertexEntry >*
      mutable_entries();
  private:
  const ::classifierpb::LabeledVertexEntry& _internal_entries(int index) const;
  ::classifierpb::LabeledVertexEntry* _internal_add_entries();
  public:
  const ::classifierpb::LabeledVertexEntry& entries(int index) const;
  ::classifierpb::LabeledVertexEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::LabeledVertexEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:classifierpb.LabeledVertices)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::LabeledVertexEntry > entries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_classifier_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClusterID

// int32 cluster_id_int = 1;
inline bool ClusterID::_internal_has_cluster_id_int() const {
  return cluster_id_case() == kClusterIdInt;
}
inline bool ClusterID::has_cluster_id_int() const {
  return _internal_has_cluster_id_int();
}
inline void ClusterID::set_has_cluster_id_int() {
  _impl_._oneof_case_[0] = kClusterIdInt;
}
inline void ClusterID::clear_cluster_id_int() {
  if (_internal_has_cluster_id_int()) {
    _impl_.cluster_id_.cluster_id_int_ = 0;
    clear_has_cluster_id();
  }
}
inline int32_t ClusterID::_internal_cluster_id_int() const {
  if (_internal_has_cluster_id_int()) {
    return _impl_.cluster_id_.cluster_id_int_;
  }
  return 0;
}
inline void ClusterID::_internal_set_cluster_id_int(int32_t value) {
  if (!_internal_has_cluster_id_int()) {
    clear_cluster_id();
    set_has_cluster_id_int();
  }
  _impl_.cluster_id_.cluster_id_int_ = value;
}
inline int32_t ClusterID::cluster_id_int() const {
  // @@protoc_insertion_point(field_get:classifierpb.ClusterID.cluster_id_int)
  return _internal_cluster_id_int();
}
inline void ClusterID::set_cluster_id_int(int32_t value) {
  _internal_set_cluster_id_int(value);
  // @@protoc_insertion_point(field_set:classifierpb.ClusterID.cluster_id_int)
}

// string cluster_id_str = 2;
inline bool ClusterID::_internal_has_cluster_id_str() const {
  return cluster_id_case() == kClusterIdStr;
}
inline bool ClusterID::has_cluster_id_str() const {
  return _internal_has_cluster_id_str();
}
inline void ClusterID::set_has_cluster_id_str() {
  _impl_._oneof_case_[0] = kClusterIdStr;
}
inline void ClusterID::clear_cluster_id_str() {
  if (_internal_has_cluster_id_str()) {
    _impl_.cluster_id_.cluster_id_str_.Destroy();
    clear_has_cluster_id();
  }
}
inline const std::string& ClusterID::cluster_id_str() const {
  // @@protoc_insertion_point(field_get:classifierpb.ClusterID.cluster_id_str)
  return _internal_cluster_id_str();
}
template <typename ArgT0, typename... ArgT>
inline void ClusterID::set_cluster_id_str(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_cluster_id_str()) {
    clear_cluster_id();
    set_has_cluster_id_str();
    _impl_.cluster_id_.cluster_id_str_.InitDefault();
  }
  _impl_.cluster_id_.cluster_id_str_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:classifierpb.ClusterID.cluster_id_str)
}
inline std::string* ClusterID::mutable_cluster_id_str() {
  std::string* _s = _internal_mutable_cluster_id_str();
  // @@protoc_insertion_point(field_mutable:classifierpb.ClusterID.cluster_id_str)
  return _s;
}
inline const std::string& ClusterID::_internal_cluster_id_str() const {
  if (_internal_has_cluster_id_str()) {
    return _impl_.cluster_id_.cluster_id_str_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ClusterID::_internal_set_cluster_id_str(const std::string& value) {
  if (!_internal_has_cluster_id_str()) {
    clear_cluster_id();
    set_has_cluster_id_str();
    _impl_.cluster_id_.cluster_id_str_.InitDefault();
  }
  _impl_.cluster_id_.cluster_id_str_.Set(value, GetArenaForAllocation());
}
inline std::string* ClusterID::_internal_mutable_cluster_id_str() {
  if (!_internal_has_cluster_id_str()) {
    clear_cluster_id();
    set_has_cluster_id_str();
    _impl_.cluster_id_.cluster_id_str_.InitDefault();
  }
  return _impl_.cluster_id_.cluster_id_str_.Mutable(      GetArenaForAllocation());
}
inline std::string* ClusterID::release_cluster_id_str() {
  // @@protoc_insertion_point(field_release:classifierpb.ClusterID.cluster_id_str)
  if (_internal_has_cluster_id_str()) {
    clear_has_cluster_id();
    return _impl_.cluster_id_.cluster_id_str_.Release();
  } else {
    return nullptr;
  }
}
inline void ClusterID::set_allocated_cluster_id_str(std::string* cluster_id_str) {
  if (has_cluster_id()) {
    clear_cluster_id();
  }
  if (cluster_id_str != nullptr) {
    set_has_cluster_id_str();
    _impl_.cluster_id_.cluster_id_str_.InitAllocated(cluster_id_str, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:classifierpb.ClusterID.cluster_id_str)
}

inline bool ClusterID::has_cluster_id() const {
  return cluster_id_case() != CLUSTER_ID_NOT_SET;
}
inline void ClusterID::clear_has_cluster_id() {
  _impl_._oneof_case_[0] = CLUSTER_ID_NOT_SET;
}
inline ClusterID::ClusterIdCase ClusterID::cluster_id_case() const {
  return ClusterID::ClusterIdCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TrainingDatasetEntry

// repeated float features = 1;
inline int TrainingDatasetEntry::_internal_features_size() const {
  return _impl_.features_.size();
}
inline int TrainingDatasetEntry::features_size() const {
  return _internal_features_size();
}
inline void TrainingDatasetEntry::clear_features() {
  _impl_.features_.Clear();
}
inline float TrainingDatasetEntry::_internal_features(int index) const {
  return _impl_.features_.Get(index);
}
inline float TrainingDatasetEntry::features(int index) const {
  // @@protoc_insertion_point(field_get:classifierpb.TrainingDatasetEntry.features)
  return _internal_features(index);
}
inline void TrainingDatasetEntry::set_features(int index, float value) {
  _impl_.features_.Set(index, value);
  // @@protoc_insertion_point(field_set:classifierpb.TrainingDatasetEntry.features)
}
inline void TrainingDatasetEntry::_internal_add_features(float value) {
  _impl_.features_.Add(value);
}
inline void TrainingDatasetEntry::add_features(float value) {
  _internal_add_features(value);
  // @@protoc_insertion_point(field_add:classifierpb.TrainingDatasetEntry.features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TrainingDatasetEntry::_internal_features() const {
  return _impl_.features_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TrainingDatasetEntry::features() const {
  // @@protoc_insertion_point(field_list:classifierpb.TrainingDatasetEntry.features)
  return _internal_features();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TrainingDatasetEntry::_internal_mutable_features() {
  return &_impl_.features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TrainingDatasetEntry::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:classifierpb.TrainingDatasetEntry.features)
  return _internal_mutable_features();
}

// .classifierpb.ClusterID cluster_id = 2;
inline bool TrainingDatasetEntry::_internal_has_cluster_id() const {
  return this != internal_default_instance() && _impl_.cluster_id_ != nullptr;
}
inline bool TrainingDatasetEntry::has_cluster_id() const {
  return _internal_has_cluster_id();
}
inline void TrainingDatasetEntry::clear_cluster_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.cluster_id_ != nullptr) {
    delete _impl_.cluster_id_;
  }
  _impl_.cluster_id_ = nullptr;
}
inline const ::classifierpb::ClusterID& TrainingDatasetEntry::_internal_cluster_id() const {
  const ::classifierpb::ClusterID* p = _impl_.cluster_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::classifierpb::ClusterID&>(
      ::classifierpb::_ClusterID_default_instance_);
}
inline const ::classifierpb::ClusterID& TrainingDatasetEntry::cluster_id() const {
  // @@protoc_insertion_point(field_get:classifierpb.TrainingDatasetEntry.cluster_id)
  return _internal_cluster_id();
}
inline void TrainingDatasetEntry::unsafe_arena_set_allocated_cluster_id(
    ::classifierpb::ClusterID* cluster_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cluster_id_);
  }
  _impl_.cluster_id_ = cluster_id;
  if (cluster_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:classifierpb.TrainingDatasetEntry.cluster_id)
}
inline ::classifierpb::ClusterID* TrainingDatasetEntry::release_cluster_id() {
  
  ::classifierpb::ClusterID* temp = _impl_.cluster_id_;
  _impl_.cluster_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::classifierpb::ClusterID* TrainingDatasetEntry::unsafe_arena_release_cluster_id() {
  // @@protoc_insertion_point(field_release:classifierpb.TrainingDatasetEntry.cluster_id)
  
  ::classifierpb::ClusterID* temp = _impl_.cluster_id_;
  _impl_.cluster_id_ = nullptr;
  return temp;
}
inline ::classifierpb::ClusterID* TrainingDatasetEntry::_internal_mutable_cluster_id() {
  
  if (_impl_.cluster_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::classifierpb::ClusterID>(GetArenaForAllocation());
    _impl_.cluster_id_ = p;
  }
  return _impl_.cluster_id_;
}
inline ::classifierpb::ClusterID* TrainingDatasetEntry::mutable_cluster_id() {
  ::classifierpb::ClusterID* _msg = _internal_mutable_cluster_id();
  // @@protoc_insertion_point(field_mutable:classifierpb.TrainingDatasetEntry.cluster_id)
  return _msg;
}
inline void TrainingDatasetEntry::set_allocated_cluster_id(::classifierpb::ClusterID* cluster_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cluster_id_;
  }
  if (cluster_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cluster_id);
    if (message_arena != submessage_arena) {
      cluster_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cluster_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cluster_id_ = cluster_id;
  // @@protoc_insertion_point(field_set_allocated:classifierpb.TrainingDatasetEntry.cluster_id)
}

// -------------------------------------------------------------------

// TrainingDataset

// repeated .classifierpb.TrainingDatasetEntry entries = 1;
inline int TrainingDataset::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int TrainingDataset::entries_size() const {
  return _internal_entries_size();
}
inline void TrainingDataset::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::classifierpb::TrainingDatasetEntry* TrainingDataset::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:classifierpb.TrainingDataset.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::TrainingDatasetEntry >*
TrainingDataset::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:classifierpb.TrainingDataset.entries)
  return &_impl_.entries_;
}
inline const ::classifierpb::TrainingDatasetEntry& TrainingDataset::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::classifierpb::TrainingDatasetEntry& TrainingDataset::entries(int index) const {
  // @@protoc_insertion_point(field_get:classifierpb.TrainingDataset.entries)
  return _internal_entries(index);
}
inline ::classifierpb::TrainingDatasetEntry* TrainingDataset::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::classifierpb::TrainingDatasetEntry* TrainingDataset::add_entries() {
  ::classifierpb::TrainingDatasetEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:classifierpb.TrainingDataset.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::TrainingDatasetEntry >&
TrainingDataset::entries() const {
  // @@protoc_insertion_point(field_list:classifierpb.TrainingDataset.entries)
  return _impl_.entries_;
}

// -------------------------------------------------------------------

// SupportVertexEntry

// int32 vertex_id = 1;
inline void SupportVertexEntry::clear_vertex_id() {
  _impl_.vertex_id_ = 0;
}
inline int32_t SupportVertexEntry::_internal_vertex_id() const {
  return _impl_.vertex_id_;
}
inline int32_t SupportVertexEntry::vertex_id() const {
  // @@protoc_insertion_point(field_get:classifierpb.SupportVertexEntry.vertex_id)
  return _internal_vertex_id();
}
inline void SupportVertexEntry::_internal_set_vertex_id(int32_t value) {
  
  _impl_.vertex_id_ = value;
}
inline void SupportVertexEntry::set_vertex_id(int32_t value) {
  _internal_set_vertex_id(value);
  // @@protoc_insertion_point(field_set:classifierpb.SupportVertexEntry.vertex_id)
}

// repeated float features = 2;
inline int SupportVertexEntry::_internal_features_size() const {
  return _impl_.features_.size();
}
inline int SupportVertexEntry::features_size() const {
  return _internal_features_size();
}
inline void SupportVertexEntry::clear_features() {
  _impl_.features_.Clear();
}
inline float SupportVertexEntry::_internal_features(int index) const {
  return _impl_.features_.Get(index);
}
inline float SupportVertexEntry::features(int index) const {
  // @@protoc_insertion_point(field_get:classifierpb.SupportVertexEntry.features)
  return _internal_features(index);
}
inline void SupportVertexEntry::set_features(int index, float value) {
  _impl_.features_.Set(index, value);
  // @@protoc_insertion_point(field_set:classifierpb.SupportVertexEntry.features)
}
inline void SupportVertexEntry::_internal_add_features(float value) {
  _impl_.features_.Add(value);
}
inline void SupportVertexEntry::add_features(float value) {
  _internal_add_features(value);
  // @@protoc_insertion_point(field_add:classifierpb.SupportVertexEntry.features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SupportVertexEntry::_internal_features() const {
  return _impl_.features_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SupportVertexEntry::features() const {
  // @@protoc_insertion_point(field_list:classifierpb.SupportVertexEntry.features)
  return _internal_features();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SupportVertexEntry::_internal_mutable_features() {
  return &_impl_.features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SupportVertexEntry::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:classifierpb.SupportVertexEntry.features)
  return _internal_mutable_features();
}

// .classifierpb.ClusterID cluster_id = 3;
inline bool SupportVertexEntry::_internal_has_cluster_id() const {
  return this != internal_default_instance() && _impl_.cluster_id_ != nullptr;
}
inline bool SupportVertexEntry::has_cluster_id() const {
  return _internal_has_cluster_id();
}
inline void SupportVertexEntry::clear_cluster_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.cluster_id_ != nullptr) {
    delete _impl_.cluster_id_;
  }
  _impl_.cluster_id_ = nullptr;
}
inline const ::classifierpb::ClusterID& SupportVertexEntry::_internal_cluster_id() const {
  const ::classifierpb::ClusterID* p = _impl_.cluster_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::classifierpb::ClusterID&>(
      ::classifierpb::_ClusterID_default_instance_);
}
inline const ::classifierpb::ClusterID& SupportVertexEntry::cluster_id() const {
  // @@protoc_insertion_point(field_get:classifierpb.SupportVertexEntry.cluster_id)
  return _internal_cluster_id();
}
inline void SupportVertexEntry::unsafe_arena_set_allocated_cluster_id(
    ::classifierpb::ClusterID* cluster_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cluster_id_);
  }
  _impl_.cluster_id_ = cluster_id;
  if (cluster_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:classifierpb.SupportVertexEntry.cluster_id)
}
inline ::classifierpb::ClusterID* SupportVertexEntry::release_cluster_id() {
  
  ::classifierpb::ClusterID* temp = _impl_.cluster_id_;
  _impl_.cluster_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::classifierpb::ClusterID* SupportVertexEntry::unsafe_arena_release_cluster_id() {
  // @@protoc_insertion_point(field_release:classifierpb.SupportVertexEntry.cluster_id)
  
  ::classifierpb::ClusterID* temp = _impl_.cluster_id_;
  _impl_.cluster_id_ = nullptr;
  return temp;
}
inline ::classifierpb::ClusterID* SupportVertexEntry::_internal_mutable_cluster_id() {
  
  if (_impl_.cluster_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::classifierpb::ClusterID>(GetArenaForAllocation());
    _impl_.cluster_id_ = p;
  }
  return _impl_.cluster_id_;
}
inline ::classifierpb::ClusterID* SupportVertexEntry::mutable_cluster_id() {
  ::classifierpb::ClusterID* _msg = _internal_mutable_cluster_id();
  // @@protoc_insertion_point(field_mutable:classifierpb.SupportVertexEntry.cluster_id)
  return _msg;
}
inline void SupportVertexEntry::set_allocated_cluster_id(::classifierpb::ClusterID* cluster_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cluster_id_;
  }
  if (cluster_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cluster_id);
    if (message_arena != submessage_arena) {
      cluster_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cluster_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cluster_id_ = cluster_id;
  // @@protoc_insertion_point(field_set_allocated:classifierpb.SupportVertexEntry.cluster_id)
}

// -------------------------------------------------------------------

// SupportVertices

// repeated .classifierpb.SupportVertexEntry entries = 1;
inline int SupportVertices::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int SupportVertices::entries_size() const {
  return _internal_entries_size();
}
inline void SupportVertices::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::classifierpb::SupportVertexEntry* SupportVertices::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:classifierpb.SupportVertices.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::SupportVertexEntry >*
SupportVertices::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:classifierpb.SupportVertices.entries)
  return &_impl_.entries_;
}
inline const ::classifierpb::SupportVertexEntry& SupportVertices::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::classifierpb::SupportVertexEntry& SupportVertices::entries(int index) const {
  // @@protoc_insertion_point(field_get:classifierpb.SupportVertices.entries)
  return _internal_entries(index);
}
inline ::classifierpb::SupportVertexEntry* SupportVertices::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::classifierpb::SupportVertexEntry* SupportVertices::add_entries() {
  ::classifierpb::SupportVertexEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:classifierpb.SupportVertices.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::SupportVertexEntry >&
SupportVertices::entries() const {
  // @@protoc_insertion_point(field_list:classifierpb.SupportVertices.entries)
  return _impl_.entries_;
}

// -------------------------------------------------------------------

// VertexToLabelEntry

// int32 vertex_id = 1;
inline void VertexToLabelEntry::clear_vertex_id() {
  _impl_.vertex_id_ = 0;
}
inline int32_t VertexToLabelEntry::_internal_vertex_id() const {
  return _impl_.vertex_id_;
}
inline int32_t VertexToLabelEntry::vertex_id() const {
  // @@protoc_insertion_point(field_get:classifierpb.VertexToLabelEntry.vertex_id)
  return _internal_vertex_id();
}
inline void VertexToLabelEntry::_internal_set_vertex_id(int32_t value) {
  
  _impl_.vertex_id_ = value;
}
inline void VertexToLabelEntry::set_vertex_id(int32_t value) {
  _internal_set_vertex_id(value);
  // @@protoc_insertion_point(field_set:classifierpb.VertexToLabelEntry.vertex_id)
}

// repeated float features = 2;
inline int VertexToLabelEntry::_internal_features_size() const {
  return _impl_.features_.size();
}
inline int VertexToLabelEntry::features_size() const {
  return _internal_features_size();
}
inline void VertexToLabelEntry::clear_features() {
  _impl_.features_.Clear();
}
inline float VertexToLabelEntry::_internal_features(int index) const {
  return _impl_.features_.Get(index);
}
inline float VertexToLabelEntry::features(int index) const {
  // @@protoc_insertion_point(field_get:classifierpb.VertexToLabelEntry.features)
  return _internal_features(index);
}
inline void VertexToLabelEntry::set_features(int index, float value) {
  _impl_.features_.Set(index, value);
  // @@protoc_insertion_point(field_set:classifierpb.VertexToLabelEntry.features)
}
inline void VertexToLabelEntry::_internal_add_features(float value) {
  _impl_.features_.Add(value);
}
inline void VertexToLabelEntry::add_features(float value) {
  _internal_add_features(value);
  // @@protoc_insertion_point(field_add:classifierpb.VertexToLabelEntry.features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VertexToLabelEntry::_internal_features() const {
  return _impl_.features_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VertexToLabelEntry::features() const {
  // @@protoc_insertion_point(field_list:classifierpb.VertexToLabelEntry.features)
  return _internal_features();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VertexToLabelEntry::_internal_mutable_features() {
  return &_impl_.features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VertexToLabelEntry::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:classifierpb.VertexToLabelEntry.features)
  return _internal_mutable_features();
}

// .classifierpb.ClusterID expected_cluster_id = 3;
inline bool VertexToLabelEntry::_internal_has_expected_cluster_id() const {
  return this != internal_default_instance() && _impl_.expected_cluster_id_ != nullptr;
}
inline bool VertexToLabelEntry::has_expected_cluster_id() const {
  return _internal_has_expected_cluster_id();
}
inline void VertexToLabelEntry::clear_expected_cluster_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.expected_cluster_id_ != nullptr) {
    delete _impl_.expected_cluster_id_;
  }
  _impl_.expected_cluster_id_ = nullptr;
}
inline const ::classifierpb::ClusterID& VertexToLabelEntry::_internal_expected_cluster_id() const {
  const ::classifierpb::ClusterID* p = _impl_.expected_cluster_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::classifierpb::ClusterID&>(
      ::classifierpb::_ClusterID_default_instance_);
}
inline const ::classifierpb::ClusterID& VertexToLabelEntry::expected_cluster_id() const {
  // @@protoc_insertion_point(field_get:classifierpb.VertexToLabelEntry.expected_cluster_id)
  return _internal_expected_cluster_id();
}
inline void VertexToLabelEntry::unsafe_arena_set_allocated_expected_cluster_id(
    ::classifierpb::ClusterID* expected_cluster_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expected_cluster_id_);
  }
  _impl_.expected_cluster_id_ = expected_cluster_id;
  if (expected_cluster_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:classifierpb.VertexToLabelEntry.expected_cluster_id)
}
inline ::classifierpb::ClusterID* VertexToLabelEntry::release_expected_cluster_id() {
  
  ::classifierpb::ClusterID* temp = _impl_.expected_cluster_id_;
  _impl_.expected_cluster_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::classifierpb::ClusterID* VertexToLabelEntry::unsafe_arena_release_expected_cluster_id() {
  // @@protoc_insertion_point(field_release:classifierpb.VertexToLabelEntry.expected_cluster_id)
  
  ::classifierpb::ClusterID* temp = _impl_.expected_cluster_id_;
  _impl_.expected_cluster_id_ = nullptr;
  return temp;
}
inline ::classifierpb::ClusterID* VertexToLabelEntry::_internal_mutable_expected_cluster_id() {
  
  if (_impl_.expected_cluster_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::classifierpb::ClusterID>(GetArenaForAllocation());
    _impl_.expected_cluster_id_ = p;
  }
  return _impl_.expected_cluster_id_;
}
inline ::classifierpb::ClusterID* VertexToLabelEntry::mutable_expected_cluster_id() {
  ::classifierpb::ClusterID* _msg = _internal_mutable_expected_cluster_id();
  // @@protoc_insertion_point(field_mutable:classifierpb.VertexToLabelEntry.expected_cluster_id)
  return _msg;
}
inline void VertexToLabelEntry::set_allocated_expected_cluster_id(::classifierpb::ClusterID* expected_cluster_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.expected_cluster_id_;
  }
  if (expected_cluster_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expected_cluster_id);
    if (message_arena != submessage_arena) {
      expected_cluster_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expected_cluster_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expected_cluster_id_ = expected_cluster_id;
  // @@protoc_insertion_point(field_set_allocated:classifierpb.VertexToLabelEntry.expected_cluster_id)
}

// -------------------------------------------------------------------

// VerticesToLabel

// repeated .classifierpb.VertexToLabelEntry entries = 1;
inline int VerticesToLabel::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int VerticesToLabel::entries_size() const {
  return _internal_entries_size();
}
inline void VerticesToLabel::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::classifierpb::VertexToLabelEntry* VerticesToLabel::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:classifierpb.VerticesToLabel.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::VertexToLabelEntry >*
VerticesToLabel::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:classifierpb.VerticesToLabel.entries)
  return &_impl_.entries_;
}
inline const ::classifierpb::VertexToLabelEntry& VerticesToLabel::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::classifierpb::VertexToLabelEntry& VerticesToLabel::entries(int index) const {
  // @@protoc_insertion_point(field_get:classifierpb.VerticesToLabel.entries)
  return _internal_entries(index);
}
inline ::classifierpb::VertexToLabelEntry* VerticesToLabel::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::classifierpb::VertexToLabelEntry* VerticesToLabel::add_entries() {
  ::classifierpb::VertexToLabelEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:classifierpb.VerticesToLabel.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::VertexToLabelEntry >&
VerticesToLabel::entries() const {
  // @@protoc_insertion_point(field_list:classifierpb.VerticesToLabel.entries)
  return _impl_.entries_;
}

// -------------------------------------------------------------------

// LabeledVertexEntry

// int32 vertex_id = 1;
inline void LabeledVertexEntry::clear_vertex_id() {
  _impl_.vertex_id_ = 0;
}
inline int32_t LabeledVertexEntry::_internal_vertex_id() const {
  return _impl_.vertex_id_;
}
inline int32_t LabeledVertexEntry::vertex_id() const {
  // @@protoc_insertion_point(field_get:classifierpb.LabeledVertexEntry.vertex_id)
  return _internal_vertex_id();
}
inline void LabeledVertexEntry::_internal_set_vertex_id(int32_t value) {
  
  _impl_.vertex_id_ = value;
}
inline void LabeledVertexEntry::set_vertex_id(int32_t value) {
  _internal_set_vertex_id(value);
  // @@protoc_insertion_point(field_set:classifierpb.LabeledVertexEntry.vertex_id)
}

// repeated float features = 2;
inline int LabeledVertexEntry::_internal_features_size() const {
  return _impl_.features_.size();
}
inline int LabeledVertexEntry::features_size() const {
  return _internal_features_size();
}
inline void LabeledVertexEntry::clear_features() {
  _impl_.features_.Clear();
}
inline float LabeledVertexEntry::_internal_features(int index) const {
  return _impl_.features_.Get(index);
}
inline float LabeledVertexEntry::features(int index) const {
  // @@protoc_insertion_point(field_get:classifierpb.LabeledVertexEntry.features)
  return _internal_features(index);
}
inline void LabeledVertexEntry::set_features(int index, float value) {
  _impl_.features_.Set(index, value);
  // @@protoc_insertion_point(field_set:classifierpb.LabeledVertexEntry.features)
}
inline void LabeledVertexEntry::_internal_add_features(float value) {
  _impl_.features_.Add(value);
}
inline void LabeledVertexEntry::add_features(float value) {
  _internal_add_features(value);
  // @@protoc_insertion_point(field_add:classifierpb.LabeledVertexEntry.features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LabeledVertexEntry::_internal_features() const {
  return _impl_.features_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LabeledVertexEntry::features() const {
  // @@protoc_insertion_point(field_list:classifierpb.LabeledVertexEntry.features)
  return _internal_features();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LabeledVertexEntry::_internal_mutable_features() {
  return &_impl_.features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LabeledVertexEntry::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:classifierpb.LabeledVertexEntry.features)
  return _internal_mutable_features();
}

// .classifierpb.ClusterID cluster_id = 3;
inline bool LabeledVertexEntry::_internal_has_cluster_id() const {
  return this != internal_default_instance() && _impl_.cluster_id_ != nullptr;
}
inline bool LabeledVertexEntry::has_cluster_id() const {
  return _internal_has_cluster_id();
}
inline void LabeledVertexEntry::clear_cluster_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.cluster_id_ != nullptr) {
    delete _impl_.cluster_id_;
  }
  _impl_.cluster_id_ = nullptr;
}
inline const ::classifierpb::ClusterID& LabeledVertexEntry::_internal_cluster_id() const {
  const ::classifierpb::ClusterID* p = _impl_.cluster_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::classifierpb::ClusterID&>(
      ::classifierpb::_ClusterID_default_instance_);
}
inline const ::classifierpb::ClusterID& LabeledVertexEntry::cluster_id() const {
  // @@protoc_insertion_point(field_get:classifierpb.LabeledVertexEntry.cluster_id)
  return _internal_cluster_id();
}
inline void LabeledVertexEntry::unsafe_arena_set_allocated_cluster_id(
    ::classifierpb::ClusterID* cluster_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cluster_id_);
  }
  _impl_.cluster_id_ = cluster_id;
  if (cluster_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:classifierpb.LabeledVertexEntry.cluster_id)
}
inline ::classifierpb::ClusterID* LabeledVertexEntry::release_cluster_id() {
  
  ::classifierpb::ClusterID* temp = _impl_.cluster_id_;
  _impl_.cluster_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::classifierpb::ClusterID* LabeledVertexEntry::unsafe_arena_release_cluster_id() {
  // @@protoc_insertion_point(field_release:classifierpb.LabeledVertexEntry.cluster_id)
  
  ::classifierpb::ClusterID* temp = _impl_.cluster_id_;
  _impl_.cluster_id_ = nullptr;
  return temp;
}
inline ::classifierpb::ClusterID* LabeledVertexEntry::_internal_mutable_cluster_id() {
  
  if (_impl_.cluster_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::classifierpb::ClusterID>(GetArenaForAllocation());
    _impl_.cluster_id_ = p;
  }
  return _impl_.cluster_id_;
}
inline ::classifierpb::ClusterID* LabeledVertexEntry::mutable_cluster_id() {
  ::classifierpb::ClusterID* _msg = _internal_mutable_cluster_id();
  // @@protoc_insertion_point(field_mutable:classifierpb.LabeledVertexEntry.cluster_id)
  return _msg;
}
inline void LabeledVertexEntry::set_allocated_cluster_id(::classifierpb::ClusterID* cluster_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cluster_id_;
  }
  if (cluster_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cluster_id);
    if (message_arena != submessage_arena) {
      cluster_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cluster_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cluster_id_ = cluster_id;
  // @@protoc_insertion_point(field_set_allocated:classifierpb.LabeledVertexEntry.cluster_id)
}

// -------------------------------------------------------------------

// LabeledVertices

// repeated .classifierpb.LabeledVertexEntry entries = 1;
inline int LabeledVertices::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int LabeledVertices::entries_size() const {
  return _internal_entries_size();
}
inline void LabeledVertices::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::classifierpb::LabeledVertexEntry* LabeledVertices::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:classifierpb.LabeledVertices.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::LabeledVertexEntry >*
LabeledVertices::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:classifierpb.LabeledVertices.entries)
  return &_impl_.entries_;
}
inline const ::classifierpb::LabeledVertexEntry& LabeledVertices::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::classifierpb::LabeledVertexEntry& LabeledVertices::entries(int index) const {
  // @@protoc_insertion_point(field_get:classifierpb.LabeledVertices.entries)
  return _internal_entries(index);
}
inline ::classifierpb::LabeledVertexEntry* LabeledVertices::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::classifierpb::LabeledVertexEntry* LabeledVertices::add_entries() {
  ::classifierpb::LabeledVertexEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:classifierpb.LabeledVertices.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::classifierpb::LabeledVertexEntry >&
LabeledVertices::entries() const {
  // @@protoc_insertion_point(field_list:classifierpb.LabeledVertices.entries)
  return _impl_.entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace classifierpb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_classifier_2eproto
