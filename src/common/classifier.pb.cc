// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: classifier.proto

#include "classifier.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace classifierpb {
PROTOBUF_CONSTEXPR Target::Target(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetDefaultTypeInternal() {}
  union {
    Target _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetDefaultTypeInternal _Target_default_instance_;
PROTOBUF_CONSTEXPR DatasetEntry::DatasetEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.features_)*/{}
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatasetEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetEntryDefaultTypeInternal() {}
  union {
    DatasetEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetEntryDefaultTypeInternal _DatasetEntry_default_instance_;
PROTOBUF_CONSTEXPR Dataset::Dataset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DatasetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DatasetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DatasetDefaultTypeInternal() {}
  union {
    Dataset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DatasetDefaultTypeInternal _Dataset_default_instance_;
PROTOBUF_CONSTEXPR SupportSampleEntry::SupportSampleEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.features_)*/{}
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_.sample_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SupportSampleEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SupportSampleEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SupportSampleEntryDefaultTypeInternal() {}
  union {
    SupportSampleEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SupportSampleEntryDefaultTypeInternal _SupportSampleEntry_default_instance_;
PROTOBUF_CONSTEXPR SupportSamples::SupportSamples(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SupportSamplesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SupportSamplesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SupportSamplesDefaultTypeInternal() {}
  union {
    SupportSamples _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SupportSamplesDefaultTypeInternal _SupportSamples_default_instance_;
PROTOBUF_CONSTEXPR TestSampleEntry::TestSampleEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.features_)*/{}
  , /*decltype(_impl_.ground_truth_)*/nullptr
  , /*decltype(_impl_.sample_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestSampleEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestSampleEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestSampleEntryDefaultTypeInternal() {}
  union {
    TestSampleEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestSampleEntryDefaultTypeInternal _TestSampleEntry_default_instance_;
PROTOBUF_CONSTEXPR TestSamples::TestSamples(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestSamplesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestSamplesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestSamplesDefaultTypeInternal() {}
  union {
    TestSamples _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestSamplesDefaultTypeInternal _TestSamples_default_instance_;
PROTOBUF_CONSTEXPR PredictedSampleEntry::PredictedSampleEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.features_)*/{}
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_.sample_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PredictedSampleEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredictedSampleEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredictedSampleEntryDefaultTypeInternal() {}
  union {
    PredictedSampleEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredictedSampleEntryDefaultTypeInternal _PredictedSampleEntry_default_instance_;
PROTOBUF_CONSTEXPR PredictedSamples::PredictedSamples(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PredictedSamplesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredictedSamplesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredictedSamplesDefaultTypeInternal() {}
  union {
    PredictedSamples _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredictedSamplesDefaultTypeInternal _PredictedSamples_default_instance_;
}  // namespace classifierpb
static ::_pb::Metadata file_level_metadata_classifier_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_classifier_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_classifier_2eproto = nullptr;

const uint32_t TableStruct_classifier_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::Target, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::classifierpb::Target, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::classifierpb::Target, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::DatasetEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::DatasetEntry, _impl_.features_),
  PROTOBUF_FIELD_OFFSET(::classifierpb::DatasetEntry, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::Dataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::Dataset, _impl_.entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::SupportSampleEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::SupportSampleEntry, _impl_.sample_id_),
  PROTOBUF_FIELD_OFFSET(::classifierpb::SupportSampleEntry, _impl_.features_),
  PROTOBUF_FIELD_OFFSET(::classifierpb::SupportSampleEntry, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::SupportSamples, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::SupportSamples, _impl_.entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::TestSampleEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::TestSampleEntry, _impl_.sample_id_),
  PROTOBUF_FIELD_OFFSET(::classifierpb::TestSampleEntry, _impl_.features_),
  PROTOBUF_FIELD_OFFSET(::classifierpb::TestSampleEntry, _impl_.ground_truth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::TestSamples, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::TestSamples, _impl_.entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::PredictedSampleEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::PredictedSampleEntry, _impl_.sample_id_),
  PROTOBUF_FIELD_OFFSET(::classifierpb::PredictedSampleEntry, _impl_.features_),
  PROTOBUF_FIELD_OFFSET(::classifierpb::PredictedSampleEntry, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::PredictedSamples, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::PredictedSamples, _impl_.entries_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::classifierpb::Target)},
  { 9, -1, -1, sizeof(::classifierpb::DatasetEntry)},
  { 17, -1, -1, sizeof(::classifierpb::Dataset)},
  { 24, -1, -1, sizeof(::classifierpb::SupportSampleEntry)},
  { 33, -1, -1, sizeof(::classifierpb::SupportSamples)},
  { 40, -1, -1, sizeof(::classifierpb::TestSampleEntry)},
  { 49, -1, -1, sizeof(::classifierpb::TestSamples)},
  { 56, -1, -1, sizeof(::classifierpb::PredictedSampleEntry)},
  { 65, -1, -1, sizeof(::classifierpb::PredictedSamples)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::classifierpb::_Target_default_instance_._instance,
  &::classifierpb::_DatasetEntry_default_instance_._instance,
  &::classifierpb::_Dataset_default_instance_._instance,
  &::classifierpb::_SupportSampleEntry_default_instance_._instance,
  &::classifierpb::_SupportSamples_default_instance_._instance,
  &::classifierpb::_TestSampleEntry_default_instance_._instance,
  &::classifierpb::_TestSamples_default_instance_._instance,
  &::classifierpb::_PredictedSampleEntry_default_instance_._instance,
  &::classifierpb::_PredictedSamples_default_instance_._instance,
};

const char descriptor_table_protodef_classifier_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020classifier.proto\022\014classifierpb\">\n\006Targ"
  "et\022\024\n\ntarget_int\030\001 \001(\005H\000\022\024\n\ntarget_str\030\002"
  " \001(\tH\000B\010\n\006target\"F\n\014DatasetEntry\022\020\n\010feat"
  "ures\030\001 \003(\002\022$\n\006target\030\002 \001(\0132\024.classifierp"
  "b.Target\"6\n\007Dataset\022+\n\007entries\030\001 \003(\0132\032.c"
  "lassifierpb.DatasetEntry\"_\n\022SupportSampl"
  "eEntry\022\021\n\tsample_id\030\001 \001(\005\022\020\n\010features\030\002 "
  "\003(\002\022$\n\006target\030\003 \001(\0132\024.classifierpb.Targe"
  "t\"C\n\016SupportSamples\0221\n\007entries\030\001 \003(\0132 .c"
  "lassifierpb.SupportSampleEntry\"b\n\017TestSa"
  "mpleEntry\022\021\n\tsample_id\030\001 \001(\005\022\020\n\010features"
  "\030\002 \003(\002\022*\n\014ground_truth\030\003 \001(\0132\024.classifie"
  "rpb.Target\"=\n\013TestSamples\022.\n\007entries\030\001 \003"
  "(\0132\035.classifierpb.TestSampleEntry\"a\n\024Pre"
  "dictedSampleEntry\022\021\n\tsample_id\030\001 \001(\005\022\020\n\010"
  "features\030\002 \003(\002\022$\n\006target\030\003 \001(\0132\024.classif"
  "ierpb.Target\"G\n\020PredictedSamples\0223\n\007entr"
  "ies\030\001 \003(\0132\".classifierpb.PredictedSample"
  "Entryb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_classifier_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_classifier_2eproto = {
    false, false, 733, descriptor_table_protodef_classifier_2eproto,
    "classifier.proto",
    &descriptor_table_classifier_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_classifier_2eproto::offsets,
    file_level_metadata_classifier_2eproto, file_level_enum_descriptors_classifier_2eproto,
    file_level_service_descriptors_classifier_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_classifier_2eproto_getter() {
  return &descriptor_table_classifier_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_classifier_2eproto(&descriptor_table_classifier_2eproto);
namespace classifierpb {

// ===================================================================

class Target::_Internal {
 public:
};

Target::Target(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.Target)
}
Target::Target(const Target& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Target* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_target();
  switch (from.target_case()) {
    case kTargetInt: {
      _this->_internal_set_target_int(from._internal_target_int());
      break;
    }
    case kTargetStr: {
      _this->_internal_set_target_str(from._internal_target_str());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:classifierpb.Target)
}

inline void Target::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_target();
}

Target::~Target() {
  // @@protoc_insertion_point(destructor:classifierpb.Target)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Target::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_target()) {
    clear_target();
  }
}

void Target::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Target::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:classifierpb.Target)
  switch (target_case()) {
    case kTargetInt: {
      // No need to clear
      break;
    }
    case kTargetStr: {
      _impl_.target_.target_str_.Destroy();
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TARGET_NOT_SET;
}


void Target::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.Target)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_target();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Target::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 target_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_target_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string target_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "classifierpb.Target.target_str"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Target::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.Target)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 target_int = 1;
  if (_internal_has_target_int()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_target_int(), target);
  }

  // string target_str = 2;
  if (_internal_has_target_str()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_str().data(), static_cast<int>(this->_internal_target_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "classifierpb.Target.target_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.Target)
  return target;
}

size_t Target::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.Target)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (target_case()) {
    // int32 target_int = 1;
    case kTargetInt: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_int());
      break;
    }
    // string target_str = 2;
    case kTargetStr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_str());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Target::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Target::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Target::GetClassData() const { return &_class_data_; }


void Target::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Target*>(&to_msg);
  auto& from = static_cast<const Target&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.Target)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.target_case()) {
    case kTargetInt: {
      _this->_internal_set_target_int(from._internal_target_int());
      break;
    }
    case kTargetStr: {
      _this->_internal_set_target_str(from._internal_target_str());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Target::CopyFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target::IsInitialized() const {
  return true;
}

void Target::InternalSwap(Target* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.target_, other->_impl_.target_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Target::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[0]);
}

// ===================================================================

class DatasetEntry::_Internal {
 public:
  static const ::classifierpb::Target& target(const DatasetEntry* msg);
};

const ::classifierpb::Target&
DatasetEntry::_Internal::target(const DatasetEntry* msg) {
  return *msg->_impl_.target_;
}
DatasetEntry::DatasetEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.DatasetEntry)
}
DatasetEntry::DatasetEntry(const DatasetEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DatasetEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){from._impl_.features_}
    , decltype(_impl_.target_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::classifierpb::Target(*from._impl_.target_);
  }
  // @@protoc_insertion_point(copy_constructor:classifierpb.DatasetEntry)
}

inline void DatasetEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){arena}
    , decltype(_impl_.target_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DatasetEntry::~DatasetEntry() {
  // @@protoc_insertion_point(destructor:classifierpb.DatasetEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DatasetEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.features_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.target_;
}

void DatasetEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DatasetEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.DatasetEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.features_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatasetEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_features(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .classifierpb.Target target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DatasetEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.DatasetEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float features = 1;
  if (this->_internal_features_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_features(), target);
  }

  // .classifierpb.Target target = 2;
  if (this->_internal_has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.DatasetEntry)
  return target;
}

size_t DatasetEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.DatasetEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float features = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_features_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .classifierpb.Target target = 2;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DatasetEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DatasetEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DatasetEntry::GetClassData() const { return &_class_data_; }


void DatasetEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DatasetEntry*>(&to_msg);
  auto& from = static_cast<const DatasetEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.DatasetEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.features_.MergeFrom(from._impl_.features_);
  if (from._internal_has_target()) {
    _this->_internal_mutable_target()->::classifierpb::Target::MergeFrom(
        from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DatasetEntry::CopyFrom(const DatasetEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.DatasetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetEntry::IsInitialized() const {
  return true;
}

void DatasetEntry::InternalSwap(DatasetEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  swap(_impl_.target_, other->_impl_.target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DatasetEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[1]);
}

// ===================================================================

class Dataset::_Internal {
 public:
};

Dataset::Dataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.Dataset)
}
Dataset::Dataset(const Dataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dataset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:classifierpb.Dataset)
}

inline void Dataset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Dataset::~Dataset() {
  // @@protoc_insertion_point(destructor:classifierpb.Dataset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dataset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void Dataset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dataset::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.Dataset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dataset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .classifierpb.DatasetEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dataset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.Dataset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .classifierpb.DatasetEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.Dataset)
  return target;
}

size_t Dataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.Dataset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .classifierpb.DatasetEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dataset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dataset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dataset::GetClassData() const { return &_class_data_; }


void Dataset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dataset*>(&to_msg);
  auto& from = static_cast<const Dataset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.Dataset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dataset::CopyFrom(const Dataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dataset::IsInitialized() const {
  return true;
}

void Dataset::InternalSwap(Dataset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dataset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[2]);
}

// ===================================================================

class SupportSampleEntry::_Internal {
 public:
  static const ::classifierpb::Target& target(const SupportSampleEntry* msg);
};

const ::classifierpb::Target&
SupportSampleEntry::_Internal::target(const SupportSampleEntry* msg) {
  return *msg->_impl_.target_;
}
SupportSampleEntry::SupportSampleEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.SupportSampleEntry)
}
SupportSampleEntry::SupportSampleEntry(const SupportSampleEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SupportSampleEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){from._impl_.features_}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.sample_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::classifierpb::Target(*from._impl_.target_);
  }
  _this->_impl_.sample_id_ = from._impl_.sample_id_;
  // @@protoc_insertion_point(copy_constructor:classifierpb.SupportSampleEntry)
}

inline void SupportSampleEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){arena}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.sample_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SupportSampleEntry::~SupportSampleEntry() {
  // @@protoc_insertion_point(destructor:classifierpb.SupportSampleEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SupportSampleEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.features_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.target_;
}

void SupportSampleEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SupportSampleEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.SupportSampleEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.features_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
  _impl_.sample_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SupportSampleEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sample_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sample_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_features(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .classifierpb.Target target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SupportSampleEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.SupportSampleEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sample_id = 1;
  if (this->_internal_sample_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sample_id(), target);
  }

  // repeated float features = 2;
  if (this->_internal_features_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_features(), target);
  }

  // .classifierpb.Target target = 3;
  if (this->_internal_has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.SupportSampleEntry)
  return target;
}

size_t SupportSampleEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.SupportSampleEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float features = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_features_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .classifierpb.Target target = 3;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  // int32 sample_id = 1;
  if (this->_internal_sample_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sample_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SupportSampleEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SupportSampleEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SupportSampleEntry::GetClassData() const { return &_class_data_; }


void SupportSampleEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SupportSampleEntry*>(&to_msg);
  auto& from = static_cast<const SupportSampleEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.SupportSampleEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.features_.MergeFrom(from._impl_.features_);
  if (from._internal_has_target()) {
    _this->_internal_mutable_target()->::classifierpb::Target::MergeFrom(
        from._internal_target());
  }
  if (from._internal_sample_id() != 0) {
    _this->_internal_set_sample_id(from._internal_sample_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SupportSampleEntry::CopyFrom(const SupportSampleEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.SupportSampleEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportSampleEntry::IsInitialized() const {
  return true;
}

void SupportSampleEntry::InternalSwap(SupportSampleEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SupportSampleEntry, _impl_.sample_id_)
      + sizeof(SupportSampleEntry::_impl_.sample_id_)
      - PROTOBUF_FIELD_OFFSET(SupportSampleEntry, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SupportSampleEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[3]);
}

// ===================================================================

class SupportSamples::_Internal {
 public:
};

SupportSamples::SupportSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.SupportSamples)
}
SupportSamples::SupportSamples(const SupportSamples& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SupportSamples* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:classifierpb.SupportSamples)
}

inline void SupportSamples::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SupportSamples::~SupportSamples() {
  // @@protoc_insertion_point(destructor:classifierpb.SupportSamples)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SupportSamples::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void SupportSamples::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SupportSamples::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.SupportSamples)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SupportSamples::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .classifierpb.SupportSampleEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SupportSamples::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.SupportSamples)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .classifierpb.SupportSampleEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.SupportSamples)
  return target;
}

size_t SupportSamples::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.SupportSamples)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .classifierpb.SupportSampleEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SupportSamples::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SupportSamples::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SupportSamples::GetClassData() const { return &_class_data_; }


void SupportSamples::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SupportSamples*>(&to_msg);
  auto& from = static_cast<const SupportSamples&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.SupportSamples)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SupportSamples::CopyFrom(const SupportSamples& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.SupportSamples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportSamples::IsInitialized() const {
  return true;
}

void SupportSamples::InternalSwap(SupportSamples* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SupportSamples::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[4]);
}

// ===================================================================

class TestSampleEntry::_Internal {
 public:
  static const ::classifierpb::Target& ground_truth(const TestSampleEntry* msg);
};

const ::classifierpb::Target&
TestSampleEntry::_Internal::ground_truth(const TestSampleEntry* msg) {
  return *msg->_impl_.ground_truth_;
}
TestSampleEntry::TestSampleEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.TestSampleEntry)
}
TestSampleEntry::TestSampleEntry(const TestSampleEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestSampleEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){from._impl_.features_}
    , decltype(_impl_.ground_truth_){nullptr}
    , decltype(_impl_.sample_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ground_truth()) {
    _this->_impl_.ground_truth_ = new ::classifierpb::Target(*from._impl_.ground_truth_);
  }
  _this->_impl_.sample_id_ = from._impl_.sample_id_;
  // @@protoc_insertion_point(copy_constructor:classifierpb.TestSampleEntry)
}

inline void TestSampleEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){arena}
    , decltype(_impl_.ground_truth_){nullptr}
    , decltype(_impl_.sample_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestSampleEntry::~TestSampleEntry() {
  // @@protoc_insertion_point(destructor:classifierpb.TestSampleEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestSampleEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.features_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.ground_truth_;
}

void TestSampleEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestSampleEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.TestSampleEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.features_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.ground_truth_ != nullptr) {
    delete _impl_.ground_truth_;
  }
  _impl_.ground_truth_ = nullptr;
  _impl_.sample_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestSampleEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sample_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sample_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_features(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .classifierpb.Target ground_truth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_truth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestSampleEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.TestSampleEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sample_id = 1;
  if (this->_internal_sample_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sample_id(), target);
  }

  // repeated float features = 2;
  if (this->_internal_features_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_features(), target);
  }

  // .classifierpb.Target ground_truth = 3;
  if (this->_internal_has_ground_truth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ground_truth(this),
        _Internal::ground_truth(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.TestSampleEntry)
  return target;
}

size_t TestSampleEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.TestSampleEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float features = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_features_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .classifierpb.Target ground_truth = 3;
  if (this->_internal_has_ground_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ground_truth_);
  }

  // int32 sample_id = 1;
  if (this->_internal_sample_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sample_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestSampleEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestSampleEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestSampleEntry::GetClassData() const { return &_class_data_; }


void TestSampleEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestSampleEntry*>(&to_msg);
  auto& from = static_cast<const TestSampleEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.TestSampleEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.features_.MergeFrom(from._impl_.features_);
  if (from._internal_has_ground_truth()) {
    _this->_internal_mutable_ground_truth()->::classifierpb::Target::MergeFrom(
        from._internal_ground_truth());
  }
  if (from._internal_sample_id() != 0) {
    _this->_internal_set_sample_id(from._internal_sample_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestSampleEntry::CopyFrom(const TestSampleEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.TestSampleEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestSampleEntry::IsInitialized() const {
  return true;
}

void TestSampleEntry::InternalSwap(TestSampleEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestSampleEntry, _impl_.sample_id_)
      + sizeof(TestSampleEntry::_impl_.sample_id_)
      - PROTOBUF_FIELD_OFFSET(TestSampleEntry, _impl_.ground_truth_)>(
          reinterpret_cast<char*>(&_impl_.ground_truth_),
          reinterpret_cast<char*>(&other->_impl_.ground_truth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestSampleEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[5]);
}

// ===================================================================

class TestSamples::_Internal {
 public:
};

TestSamples::TestSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.TestSamples)
}
TestSamples::TestSamples(const TestSamples& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestSamples* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:classifierpb.TestSamples)
}

inline void TestSamples::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestSamples::~TestSamples() {
  // @@protoc_insertion_point(destructor:classifierpb.TestSamples)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestSamples::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void TestSamples::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestSamples::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.TestSamples)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestSamples::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .classifierpb.TestSampleEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestSamples::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.TestSamples)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .classifierpb.TestSampleEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.TestSamples)
  return target;
}

size_t TestSamples::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.TestSamples)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .classifierpb.TestSampleEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestSamples::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestSamples::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestSamples::GetClassData() const { return &_class_data_; }


void TestSamples::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestSamples*>(&to_msg);
  auto& from = static_cast<const TestSamples&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.TestSamples)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestSamples::CopyFrom(const TestSamples& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.TestSamples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestSamples::IsInitialized() const {
  return true;
}

void TestSamples::InternalSwap(TestSamples* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestSamples::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[6]);
}

// ===================================================================

class PredictedSampleEntry::_Internal {
 public:
  static const ::classifierpb::Target& target(const PredictedSampleEntry* msg);
};

const ::classifierpb::Target&
PredictedSampleEntry::_Internal::target(const PredictedSampleEntry* msg) {
  return *msg->_impl_.target_;
}
PredictedSampleEntry::PredictedSampleEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.PredictedSampleEntry)
}
PredictedSampleEntry::PredictedSampleEntry(const PredictedSampleEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PredictedSampleEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){from._impl_.features_}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.sample_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::classifierpb::Target(*from._impl_.target_);
  }
  _this->_impl_.sample_id_ = from._impl_.sample_id_;
  // @@protoc_insertion_point(copy_constructor:classifierpb.PredictedSampleEntry)
}

inline void PredictedSampleEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){arena}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.sample_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PredictedSampleEntry::~PredictedSampleEntry() {
  // @@protoc_insertion_point(destructor:classifierpb.PredictedSampleEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PredictedSampleEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.features_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.target_;
}

void PredictedSampleEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PredictedSampleEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.PredictedSampleEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.features_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
  _impl_.sample_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictedSampleEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sample_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sample_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_features(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .classifierpb.Target target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredictedSampleEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.PredictedSampleEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sample_id = 1;
  if (this->_internal_sample_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sample_id(), target);
  }

  // repeated float features = 2;
  if (this->_internal_features_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_features(), target);
  }

  // .classifierpb.Target target = 3;
  if (this->_internal_has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.PredictedSampleEntry)
  return target;
}

size_t PredictedSampleEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.PredictedSampleEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float features = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_features_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .classifierpb.Target target = 3;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  // int32 sample_id = 1;
  if (this->_internal_sample_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sample_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredictedSampleEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PredictedSampleEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredictedSampleEntry::GetClassData() const { return &_class_data_; }


void PredictedSampleEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PredictedSampleEntry*>(&to_msg);
  auto& from = static_cast<const PredictedSampleEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.PredictedSampleEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.features_.MergeFrom(from._impl_.features_);
  if (from._internal_has_target()) {
    _this->_internal_mutable_target()->::classifierpb::Target::MergeFrom(
        from._internal_target());
  }
  if (from._internal_sample_id() != 0) {
    _this->_internal_set_sample_id(from._internal_sample_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredictedSampleEntry::CopyFrom(const PredictedSampleEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.PredictedSampleEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictedSampleEntry::IsInitialized() const {
  return true;
}

void PredictedSampleEntry::InternalSwap(PredictedSampleEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PredictedSampleEntry, _impl_.sample_id_)
      + sizeof(PredictedSampleEntry::_impl_.sample_id_)
      - PROTOBUF_FIELD_OFFSET(PredictedSampleEntry, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictedSampleEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[7]);
}

// ===================================================================

class PredictedSamples::_Internal {
 public:
};

PredictedSamples::PredictedSamples(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.PredictedSamples)
}
PredictedSamples::PredictedSamples(const PredictedSamples& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PredictedSamples* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:classifierpb.PredictedSamples)
}

inline void PredictedSamples::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PredictedSamples::~PredictedSamples() {
  // @@protoc_insertion_point(destructor:classifierpb.PredictedSamples)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PredictedSamples::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void PredictedSamples::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PredictedSamples::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.PredictedSamples)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictedSamples::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .classifierpb.PredictedSampleEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredictedSamples::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.PredictedSamples)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .classifierpb.PredictedSampleEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.PredictedSamples)
  return target;
}

size_t PredictedSamples::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.PredictedSamples)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .classifierpb.PredictedSampleEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredictedSamples::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PredictedSamples::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredictedSamples::GetClassData() const { return &_class_data_; }


void PredictedSamples::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PredictedSamples*>(&to_msg);
  auto& from = static_cast<const PredictedSamples&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.PredictedSamples)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredictedSamples::CopyFrom(const PredictedSamples& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.PredictedSamples)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictedSamples::IsInitialized() const {
  return true;
}

void PredictedSamples::InternalSwap(PredictedSamples* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictedSamples::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace classifierpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::classifierpb::Target*
Arena::CreateMaybeMessage< ::classifierpb::Target >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::Target >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::DatasetEntry*
Arena::CreateMaybeMessage< ::classifierpb::DatasetEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::DatasetEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::Dataset*
Arena::CreateMaybeMessage< ::classifierpb::Dataset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::Dataset >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::SupportSampleEntry*
Arena::CreateMaybeMessage< ::classifierpb::SupportSampleEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::SupportSampleEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::SupportSamples*
Arena::CreateMaybeMessage< ::classifierpb::SupportSamples >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::SupportSamples >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::TestSampleEntry*
Arena::CreateMaybeMessage< ::classifierpb::TestSampleEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::TestSampleEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::TestSamples*
Arena::CreateMaybeMessage< ::classifierpb::TestSamples >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::TestSamples >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::PredictedSampleEntry*
Arena::CreateMaybeMessage< ::classifierpb::PredictedSampleEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::PredictedSampleEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::PredictedSamples*
Arena::CreateMaybeMessage< ::classifierpb::PredictedSamples >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::PredictedSamples >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
