// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: classifier.proto

#include "classifier.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace classifierpb {
PROTOBUF_CONSTEXPR ClusterID::ClusterID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cluster_id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ClusterIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClusterIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClusterIDDefaultTypeInternal() {}
  union {
    ClusterID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClusterIDDefaultTypeInternal _ClusterID_default_instance_;
PROTOBUF_CONSTEXPR TrainingDatasetEntry::TrainingDatasetEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.features_)*/{}
  , /*decltype(_impl_.cluster_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrainingDatasetEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrainingDatasetEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrainingDatasetEntryDefaultTypeInternal() {}
  union {
    TrainingDatasetEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrainingDatasetEntryDefaultTypeInternal _TrainingDatasetEntry_default_instance_;
PROTOBUF_CONSTEXPR TrainingDataset::TrainingDataset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrainingDatasetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrainingDatasetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrainingDatasetDefaultTypeInternal() {}
  union {
    TrainingDataset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrainingDatasetDefaultTypeInternal _TrainingDataset_default_instance_;
PROTOBUF_CONSTEXPR SupportVertexEntry::SupportVertexEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.features_)*/{}
  , /*decltype(_impl_.cluster_id_)*/nullptr
  , /*decltype(_impl_.vertex_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SupportVertexEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SupportVertexEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SupportVertexEntryDefaultTypeInternal() {}
  union {
    SupportVertexEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SupportVertexEntryDefaultTypeInternal _SupportVertexEntry_default_instance_;
PROTOBUF_CONSTEXPR SupportVertices::SupportVertices(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SupportVerticesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SupportVerticesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SupportVerticesDefaultTypeInternal() {}
  union {
    SupportVertices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SupportVerticesDefaultTypeInternal _SupportVertices_default_instance_;
PROTOBUF_CONSTEXPR VertexToLabelEntry::VertexToLabelEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.features_)*/{}
  , /*decltype(_impl_.expected_cluster_id_)*/nullptr
  , /*decltype(_impl_.vertex_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VertexToLabelEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VertexToLabelEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VertexToLabelEntryDefaultTypeInternal() {}
  union {
    VertexToLabelEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VertexToLabelEntryDefaultTypeInternal _VertexToLabelEntry_default_instance_;
PROTOBUF_CONSTEXPR VerticesToLabel::VerticesToLabel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VerticesToLabelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerticesToLabelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerticesToLabelDefaultTypeInternal() {}
  union {
    VerticesToLabel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerticesToLabelDefaultTypeInternal _VerticesToLabel_default_instance_;
PROTOBUF_CONSTEXPR LabeledVertexEntry::LabeledVertexEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.features_)*/{}
  , /*decltype(_impl_.cluster_id_)*/nullptr
  , /*decltype(_impl_.vertex_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LabeledVertexEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabeledVertexEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabeledVertexEntryDefaultTypeInternal() {}
  union {
    LabeledVertexEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabeledVertexEntryDefaultTypeInternal _LabeledVertexEntry_default_instance_;
PROTOBUF_CONSTEXPR LabeledVertices::LabeledVertices(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LabeledVerticesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabeledVerticesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabeledVerticesDefaultTypeInternal() {}
  union {
    LabeledVertices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabeledVerticesDefaultTypeInternal _LabeledVertices_default_instance_;
}  // namespace classifierpb
static ::_pb::Metadata file_level_metadata_classifier_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_classifier_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_classifier_2eproto = nullptr;

const uint32_t TableStruct_classifier_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::ClusterID, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::classifierpb::ClusterID, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::classifierpb::ClusterID, _impl_.cluster_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::TrainingDatasetEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::TrainingDatasetEntry, _impl_.features_),
  PROTOBUF_FIELD_OFFSET(::classifierpb::TrainingDatasetEntry, _impl_.cluster_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::TrainingDataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::TrainingDataset, _impl_.entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::SupportVertexEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::SupportVertexEntry, _impl_.vertex_id_),
  PROTOBUF_FIELD_OFFSET(::classifierpb::SupportVertexEntry, _impl_.features_),
  PROTOBUF_FIELD_OFFSET(::classifierpb::SupportVertexEntry, _impl_.cluster_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::SupportVertices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::SupportVertices, _impl_.entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::VertexToLabelEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::VertexToLabelEntry, _impl_.vertex_id_),
  PROTOBUF_FIELD_OFFSET(::classifierpb::VertexToLabelEntry, _impl_.features_),
  PROTOBUF_FIELD_OFFSET(::classifierpb::VertexToLabelEntry, _impl_.expected_cluster_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::VerticesToLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::VerticesToLabel, _impl_.entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::LabeledVertexEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::LabeledVertexEntry, _impl_.vertex_id_),
  PROTOBUF_FIELD_OFFSET(::classifierpb::LabeledVertexEntry, _impl_.features_),
  PROTOBUF_FIELD_OFFSET(::classifierpb::LabeledVertexEntry, _impl_.cluster_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::classifierpb::LabeledVertices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::classifierpb::LabeledVertices, _impl_.entries_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::classifierpb::ClusterID)},
  { 9, -1, -1, sizeof(::classifierpb::TrainingDatasetEntry)},
  { 17, -1, -1, sizeof(::classifierpb::TrainingDataset)},
  { 24, -1, -1, sizeof(::classifierpb::SupportVertexEntry)},
  { 33, -1, -1, sizeof(::classifierpb::SupportVertices)},
  { 40, -1, -1, sizeof(::classifierpb::VertexToLabelEntry)},
  { 49, -1, -1, sizeof(::classifierpb::VerticesToLabel)},
  { 56, -1, -1, sizeof(::classifierpb::LabeledVertexEntry)},
  { 65, -1, -1, sizeof(::classifierpb::LabeledVertices)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::classifierpb::_ClusterID_default_instance_._instance,
  &::classifierpb::_TrainingDatasetEntry_default_instance_._instance,
  &::classifierpb::_TrainingDataset_default_instance_._instance,
  &::classifierpb::_SupportVertexEntry_default_instance_._instance,
  &::classifierpb::_SupportVertices_default_instance_._instance,
  &::classifierpb::_VertexToLabelEntry_default_instance_._instance,
  &::classifierpb::_VerticesToLabel_default_instance_._instance,
  &::classifierpb::_LabeledVertexEntry_default_instance_._instance,
  &::classifierpb::_LabeledVertices_default_instance_._instance,
};

const char descriptor_table_protodef_classifier_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020classifier.proto\022\014classifierpb\"M\n\tClus"
  "terID\022\030\n\016cluster_id_int\030\001 \001(\005H\000\022\030\n\016clust"
  "er_id_str\030\002 \001(\tH\000B\014\n\ncluster_id\"U\n\024Train"
  "ingDatasetEntry\022\020\n\010features\030\001 \003(\002\022+\n\nclu"
  "ster_id\030\002 \001(\0132\027.classifierpb.ClusterID\"F"
  "\n\017TrainingDataset\0223\n\007entries\030\001 \003(\0132\".cla"
  "ssifierpb.TrainingDatasetEntry\"f\n\022Suppor"
  "tVertexEntry\022\021\n\tvertex_id\030\001 \001(\005\022\020\n\010featu"
  "res\030\002 \003(\002\022+\n\ncluster_id\030\003 \001(\0132\027.classifi"
  "erpb.ClusterID\"D\n\017SupportVertices\0221\n\007ent"
  "ries\030\001 \003(\0132 .classifierpb.SupportVertexE"
  "ntry\"o\n\022VertexToLabelEntry\022\021\n\tvertex_id\030"
  "\001 \001(\005\022\020\n\010features\030\002 \003(\002\0224\n\023expected_clus"
  "ter_id\030\003 \001(\0132\027.classifierpb.ClusterID\"D\n"
  "\017VerticesToLabel\0221\n\007entries\030\001 \003(\0132 .clas"
  "sifierpb.VertexToLabelEntry\"f\n\022LabeledVe"
  "rtexEntry\022\021\n\tvertex_id\030\001 \001(\005\022\020\n\010features"
  "\030\002 \003(\002\022+\n\ncluster_id\030\003 \001(\0132\027.classifierp"
  "b.ClusterID\"D\n\017LabeledVertices\0221\n\007entrie"
  "s\030\001 \003(\0132 .classifierpb.LabeledVertexEntr"
  "yb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_classifier_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_classifier_2eproto = {
    false, false, 809, descriptor_table_protodef_classifier_2eproto,
    "classifier.proto",
    &descriptor_table_classifier_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_classifier_2eproto::offsets,
    file_level_metadata_classifier_2eproto, file_level_enum_descriptors_classifier_2eproto,
    file_level_service_descriptors_classifier_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_classifier_2eproto_getter() {
  return &descriptor_table_classifier_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_classifier_2eproto(&descriptor_table_classifier_2eproto);
namespace classifierpb {

// ===================================================================

class ClusterID::_Internal {
 public:
};

ClusterID::ClusterID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.ClusterID)
}
ClusterID::ClusterID(const ClusterID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClusterID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cluster_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_cluster_id();
  switch (from.cluster_id_case()) {
    case kClusterIdInt: {
      _this->_internal_set_cluster_id_int(from._internal_cluster_id_int());
      break;
    }
    case kClusterIdStr: {
      _this->_internal_set_cluster_id_str(from._internal_cluster_id_str());
      break;
    }
    case CLUSTER_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:classifierpb.ClusterID)
}

inline void ClusterID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cluster_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_cluster_id();
}

ClusterID::~ClusterID() {
  // @@protoc_insertion_point(destructor:classifierpb.ClusterID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClusterID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_cluster_id()) {
    clear_cluster_id();
  }
}

void ClusterID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClusterID::clear_cluster_id() {
// @@protoc_insertion_point(one_of_clear_start:classifierpb.ClusterID)
  switch (cluster_id_case()) {
    case kClusterIdInt: {
      // No need to clear
      break;
    }
    case kClusterIdStr: {
      _impl_.cluster_id_.cluster_id_str_.Destroy();
      break;
    }
    case CLUSTER_ID_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CLUSTER_ID_NOT_SET;
}


void ClusterID::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.ClusterID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_cluster_id();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClusterID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cluster_id_int = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_cluster_id_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cluster_id_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cluster_id_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "classifierpb.ClusterID.cluster_id_str"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClusterID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.ClusterID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cluster_id_int = 1;
  if (_internal_has_cluster_id_int()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cluster_id_int(), target);
  }

  // string cluster_id_str = 2;
  if (_internal_has_cluster_id_str()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cluster_id_str().data(), static_cast<int>(this->_internal_cluster_id_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "classifierpb.ClusterID.cluster_id_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cluster_id_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.ClusterID)
  return target;
}

size_t ClusterID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.ClusterID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (cluster_id_case()) {
    // int32 cluster_id_int = 1;
    case kClusterIdInt: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cluster_id_int());
      break;
    }
    // string cluster_id_str = 2;
    case kClusterIdStr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cluster_id_str());
      break;
    }
    case CLUSTER_ID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClusterID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClusterID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClusterID::GetClassData() const { return &_class_data_; }


void ClusterID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClusterID*>(&to_msg);
  auto& from = static_cast<const ClusterID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.ClusterID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.cluster_id_case()) {
    case kClusterIdInt: {
      _this->_internal_set_cluster_id_int(from._internal_cluster_id_int());
      break;
    }
    case kClusterIdStr: {
      _this->_internal_set_cluster_id_str(from._internal_cluster_id_str());
      break;
    }
    case CLUSTER_ID_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClusterID::CopyFrom(const ClusterID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.ClusterID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterID::IsInitialized() const {
  return true;
}

void ClusterID::InternalSwap(ClusterID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.cluster_id_, other->_impl_.cluster_id_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClusterID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[0]);
}

// ===================================================================

class TrainingDatasetEntry::_Internal {
 public:
  static const ::classifierpb::ClusterID& cluster_id(const TrainingDatasetEntry* msg);
};

const ::classifierpb::ClusterID&
TrainingDatasetEntry::_Internal::cluster_id(const TrainingDatasetEntry* msg) {
  return *msg->_impl_.cluster_id_;
}
TrainingDatasetEntry::TrainingDatasetEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.TrainingDatasetEntry)
}
TrainingDatasetEntry::TrainingDatasetEntry(const TrainingDatasetEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrainingDatasetEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){from._impl_.features_}
    , decltype(_impl_.cluster_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cluster_id()) {
    _this->_impl_.cluster_id_ = new ::classifierpb::ClusterID(*from._impl_.cluster_id_);
  }
  // @@protoc_insertion_point(copy_constructor:classifierpb.TrainingDatasetEntry)
}

inline void TrainingDatasetEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){arena}
    , decltype(_impl_.cluster_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrainingDatasetEntry::~TrainingDatasetEntry() {
  // @@protoc_insertion_point(destructor:classifierpb.TrainingDatasetEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrainingDatasetEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.features_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.cluster_id_;
}

void TrainingDatasetEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrainingDatasetEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.TrainingDatasetEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.features_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.cluster_id_ != nullptr) {
    delete _impl_.cluster_id_;
  }
  _impl_.cluster_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainingDatasetEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_features(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .classifierpb.ClusterID cluster_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cluster_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrainingDatasetEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.TrainingDatasetEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float features = 1;
  if (this->_internal_features_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_features(), target);
  }

  // .classifierpb.ClusterID cluster_id = 2;
  if (this->_internal_has_cluster_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cluster_id(this),
        _Internal::cluster_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.TrainingDatasetEntry)
  return target;
}

size_t TrainingDatasetEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.TrainingDatasetEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float features = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_features_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .classifierpb.ClusterID cluster_id = 2;
  if (this->_internal_has_cluster_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cluster_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrainingDatasetEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrainingDatasetEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrainingDatasetEntry::GetClassData() const { return &_class_data_; }


void TrainingDatasetEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrainingDatasetEntry*>(&to_msg);
  auto& from = static_cast<const TrainingDatasetEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.TrainingDatasetEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.features_.MergeFrom(from._impl_.features_);
  if (from._internal_has_cluster_id()) {
    _this->_internal_mutable_cluster_id()->::classifierpb::ClusterID::MergeFrom(
        from._internal_cluster_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrainingDatasetEntry::CopyFrom(const TrainingDatasetEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.TrainingDatasetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainingDatasetEntry::IsInitialized() const {
  return true;
}

void TrainingDatasetEntry::InternalSwap(TrainingDatasetEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  swap(_impl_.cluster_id_, other->_impl_.cluster_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainingDatasetEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[1]);
}

// ===================================================================

class TrainingDataset::_Internal {
 public:
};

TrainingDataset::TrainingDataset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.TrainingDataset)
}
TrainingDataset::TrainingDataset(const TrainingDataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrainingDataset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:classifierpb.TrainingDataset)
}

inline void TrainingDataset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrainingDataset::~TrainingDataset() {
  // @@protoc_insertion_point(destructor:classifierpb.TrainingDataset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrainingDataset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void TrainingDataset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrainingDataset::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.TrainingDataset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrainingDataset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .classifierpb.TrainingDatasetEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrainingDataset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.TrainingDataset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .classifierpb.TrainingDatasetEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.TrainingDataset)
  return target;
}

size_t TrainingDataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.TrainingDataset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .classifierpb.TrainingDatasetEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrainingDataset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrainingDataset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrainingDataset::GetClassData() const { return &_class_data_; }


void TrainingDataset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrainingDataset*>(&to_msg);
  auto& from = static_cast<const TrainingDataset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.TrainingDataset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrainingDataset::CopyFrom(const TrainingDataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.TrainingDataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainingDataset::IsInitialized() const {
  return true;
}

void TrainingDataset::InternalSwap(TrainingDataset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainingDataset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[2]);
}

// ===================================================================

class SupportVertexEntry::_Internal {
 public:
  static const ::classifierpb::ClusterID& cluster_id(const SupportVertexEntry* msg);
};

const ::classifierpb::ClusterID&
SupportVertexEntry::_Internal::cluster_id(const SupportVertexEntry* msg) {
  return *msg->_impl_.cluster_id_;
}
SupportVertexEntry::SupportVertexEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.SupportVertexEntry)
}
SupportVertexEntry::SupportVertexEntry(const SupportVertexEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SupportVertexEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){from._impl_.features_}
    , decltype(_impl_.cluster_id_){nullptr}
    , decltype(_impl_.vertex_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cluster_id()) {
    _this->_impl_.cluster_id_ = new ::classifierpb::ClusterID(*from._impl_.cluster_id_);
  }
  _this->_impl_.vertex_id_ = from._impl_.vertex_id_;
  // @@protoc_insertion_point(copy_constructor:classifierpb.SupportVertexEntry)
}

inline void SupportVertexEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){arena}
    , decltype(_impl_.cluster_id_){nullptr}
    , decltype(_impl_.vertex_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SupportVertexEntry::~SupportVertexEntry() {
  // @@protoc_insertion_point(destructor:classifierpb.SupportVertexEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SupportVertexEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.features_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.cluster_id_;
}

void SupportVertexEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SupportVertexEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.SupportVertexEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.features_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.cluster_id_ != nullptr) {
    delete _impl_.cluster_id_;
  }
  _impl_.cluster_id_ = nullptr;
  _impl_.vertex_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SupportVertexEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vertex_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vertex_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_features(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .classifierpb.ClusterID cluster_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cluster_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SupportVertexEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.SupportVertexEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vertex_id = 1;
  if (this->_internal_vertex_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_vertex_id(), target);
  }

  // repeated float features = 2;
  if (this->_internal_features_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_features(), target);
  }

  // .classifierpb.ClusterID cluster_id = 3;
  if (this->_internal_has_cluster_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cluster_id(this),
        _Internal::cluster_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.SupportVertexEntry)
  return target;
}

size_t SupportVertexEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.SupportVertexEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float features = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_features_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .classifierpb.ClusterID cluster_id = 3;
  if (this->_internal_has_cluster_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cluster_id_);
  }

  // int32 vertex_id = 1;
  if (this->_internal_vertex_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vertex_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SupportVertexEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SupportVertexEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SupportVertexEntry::GetClassData() const { return &_class_data_; }


void SupportVertexEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SupportVertexEntry*>(&to_msg);
  auto& from = static_cast<const SupportVertexEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.SupportVertexEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.features_.MergeFrom(from._impl_.features_);
  if (from._internal_has_cluster_id()) {
    _this->_internal_mutable_cluster_id()->::classifierpb::ClusterID::MergeFrom(
        from._internal_cluster_id());
  }
  if (from._internal_vertex_id() != 0) {
    _this->_internal_set_vertex_id(from._internal_vertex_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SupportVertexEntry::CopyFrom(const SupportVertexEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.SupportVertexEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportVertexEntry::IsInitialized() const {
  return true;
}

void SupportVertexEntry::InternalSwap(SupportVertexEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SupportVertexEntry, _impl_.vertex_id_)
      + sizeof(SupportVertexEntry::_impl_.vertex_id_)
      - PROTOBUF_FIELD_OFFSET(SupportVertexEntry, _impl_.cluster_id_)>(
          reinterpret_cast<char*>(&_impl_.cluster_id_),
          reinterpret_cast<char*>(&other->_impl_.cluster_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SupportVertexEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[3]);
}

// ===================================================================

class SupportVertices::_Internal {
 public:
};

SupportVertices::SupportVertices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.SupportVertices)
}
SupportVertices::SupportVertices(const SupportVertices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SupportVertices* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:classifierpb.SupportVertices)
}

inline void SupportVertices::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SupportVertices::~SupportVertices() {
  // @@protoc_insertion_point(destructor:classifierpb.SupportVertices)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SupportVertices::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void SupportVertices::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SupportVertices::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.SupportVertices)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SupportVertices::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .classifierpb.SupportVertexEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SupportVertices::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.SupportVertices)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .classifierpb.SupportVertexEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.SupportVertices)
  return target;
}

size_t SupportVertices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.SupportVertices)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .classifierpb.SupportVertexEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SupportVertices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SupportVertices::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SupportVertices::GetClassData() const { return &_class_data_; }


void SupportVertices::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SupportVertices*>(&to_msg);
  auto& from = static_cast<const SupportVertices&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.SupportVertices)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SupportVertices::CopyFrom(const SupportVertices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.SupportVertices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportVertices::IsInitialized() const {
  return true;
}

void SupportVertices::InternalSwap(SupportVertices* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SupportVertices::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[4]);
}

// ===================================================================

class VertexToLabelEntry::_Internal {
 public:
  static const ::classifierpb::ClusterID& expected_cluster_id(const VertexToLabelEntry* msg);
};

const ::classifierpb::ClusterID&
VertexToLabelEntry::_Internal::expected_cluster_id(const VertexToLabelEntry* msg) {
  return *msg->_impl_.expected_cluster_id_;
}
VertexToLabelEntry::VertexToLabelEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.VertexToLabelEntry)
}
VertexToLabelEntry::VertexToLabelEntry(const VertexToLabelEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VertexToLabelEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){from._impl_.features_}
    , decltype(_impl_.expected_cluster_id_){nullptr}
    , decltype(_impl_.vertex_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expected_cluster_id()) {
    _this->_impl_.expected_cluster_id_ = new ::classifierpb::ClusterID(*from._impl_.expected_cluster_id_);
  }
  _this->_impl_.vertex_id_ = from._impl_.vertex_id_;
  // @@protoc_insertion_point(copy_constructor:classifierpb.VertexToLabelEntry)
}

inline void VertexToLabelEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){arena}
    , decltype(_impl_.expected_cluster_id_){nullptr}
    , decltype(_impl_.vertex_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VertexToLabelEntry::~VertexToLabelEntry() {
  // @@protoc_insertion_point(destructor:classifierpb.VertexToLabelEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VertexToLabelEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.features_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.expected_cluster_id_;
}

void VertexToLabelEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VertexToLabelEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.VertexToLabelEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.features_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.expected_cluster_id_ != nullptr) {
    delete _impl_.expected_cluster_id_;
  }
  _impl_.expected_cluster_id_ = nullptr;
  _impl_.vertex_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VertexToLabelEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vertex_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vertex_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_features(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .classifierpb.ClusterID expected_cluster_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expected_cluster_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VertexToLabelEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.VertexToLabelEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vertex_id = 1;
  if (this->_internal_vertex_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_vertex_id(), target);
  }

  // repeated float features = 2;
  if (this->_internal_features_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_features(), target);
  }

  // .classifierpb.ClusterID expected_cluster_id = 3;
  if (this->_internal_has_expected_cluster_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::expected_cluster_id(this),
        _Internal::expected_cluster_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.VertexToLabelEntry)
  return target;
}

size_t VertexToLabelEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.VertexToLabelEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float features = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_features_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .classifierpb.ClusterID expected_cluster_id = 3;
  if (this->_internal_has_expected_cluster_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expected_cluster_id_);
  }

  // int32 vertex_id = 1;
  if (this->_internal_vertex_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vertex_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VertexToLabelEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VertexToLabelEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VertexToLabelEntry::GetClassData() const { return &_class_data_; }


void VertexToLabelEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VertexToLabelEntry*>(&to_msg);
  auto& from = static_cast<const VertexToLabelEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.VertexToLabelEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.features_.MergeFrom(from._impl_.features_);
  if (from._internal_has_expected_cluster_id()) {
    _this->_internal_mutable_expected_cluster_id()->::classifierpb::ClusterID::MergeFrom(
        from._internal_expected_cluster_id());
  }
  if (from._internal_vertex_id() != 0) {
    _this->_internal_set_vertex_id(from._internal_vertex_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VertexToLabelEntry::CopyFrom(const VertexToLabelEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.VertexToLabelEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexToLabelEntry::IsInitialized() const {
  return true;
}

void VertexToLabelEntry::InternalSwap(VertexToLabelEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VertexToLabelEntry, _impl_.vertex_id_)
      + sizeof(VertexToLabelEntry::_impl_.vertex_id_)
      - PROTOBUF_FIELD_OFFSET(VertexToLabelEntry, _impl_.expected_cluster_id_)>(
          reinterpret_cast<char*>(&_impl_.expected_cluster_id_),
          reinterpret_cast<char*>(&other->_impl_.expected_cluster_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexToLabelEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[5]);
}

// ===================================================================

class VerticesToLabel::_Internal {
 public:
};

VerticesToLabel::VerticesToLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.VerticesToLabel)
}
VerticesToLabel::VerticesToLabel(const VerticesToLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VerticesToLabel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:classifierpb.VerticesToLabel)
}

inline void VerticesToLabel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VerticesToLabel::~VerticesToLabel() {
  // @@protoc_insertion_point(destructor:classifierpb.VerticesToLabel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerticesToLabel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void VerticesToLabel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerticesToLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.VerticesToLabel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerticesToLabel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .classifierpb.VertexToLabelEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerticesToLabel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.VerticesToLabel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .classifierpb.VertexToLabelEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.VerticesToLabel)
  return target;
}

size_t VerticesToLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.VerticesToLabel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .classifierpb.VertexToLabelEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerticesToLabel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VerticesToLabel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerticesToLabel::GetClassData() const { return &_class_data_; }


void VerticesToLabel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VerticesToLabel*>(&to_msg);
  auto& from = static_cast<const VerticesToLabel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.VerticesToLabel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerticesToLabel::CopyFrom(const VerticesToLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.VerticesToLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerticesToLabel::IsInitialized() const {
  return true;
}

void VerticesToLabel::InternalSwap(VerticesToLabel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerticesToLabel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[6]);
}

// ===================================================================

class LabeledVertexEntry::_Internal {
 public:
  static const ::classifierpb::ClusterID& cluster_id(const LabeledVertexEntry* msg);
};

const ::classifierpb::ClusterID&
LabeledVertexEntry::_Internal::cluster_id(const LabeledVertexEntry* msg) {
  return *msg->_impl_.cluster_id_;
}
LabeledVertexEntry::LabeledVertexEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.LabeledVertexEntry)
}
LabeledVertexEntry::LabeledVertexEntry(const LabeledVertexEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LabeledVertexEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){from._impl_.features_}
    , decltype(_impl_.cluster_id_){nullptr}
    , decltype(_impl_.vertex_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cluster_id()) {
    _this->_impl_.cluster_id_ = new ::classifierpb::ClusterID(*from._impl_.cluster_id_);
  }
  _this->_impl_.vertex_id_ = from._impl_.vertex_id_;
  // @@protoc_insertion_point(copy_constructor:classifierpb.LabeledVertexEntry)
}

inline void LabeledVertexEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){arena}
    , decltype(_impl_.cluster_id_){nullptr}
    , decltype(_impl_.vertex_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LabeledVertexEntry::~LabeledVertexEntry() {
  // @@protoc_insertion_point(destructor:classifierpb.LabeledVertexEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LabeledVertexEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.features_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.cluster_id_;
}

void LabeledVertexEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LabeledVertexEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.LabeledVertexEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.features_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.cluster_id_ != nullptr) {
    delete _impl_.cluster_id_;
  }
  _impl_.cluster_id_ = nullptr;
  _impl_.vertex_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabeledVertexEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vertex_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vertex_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_features(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .classifierpb.ClusterID cluster_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cluster_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LabeledVertexEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.LabeledVertexEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vertex_id = 1;
  if (this->_internal_vertex_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_vertex_id(), target);
  }

  // repeated float features = 2;
  if (this->_internal_features_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_features(), target);
  }

  // .classifierpb.ClusterID cluster_id = 3;
  if (this->_internal_has_cluster_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cluster_id(this),
        _Internal::cluster_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.LabeledVertexEntry)
  return target;
}

size_t LabeledVertexEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.LabeledVertexEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float features = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_features_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .classifierpb.ClusterID cluster_id = 3;
  if (this->_internal_has_cluster_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cluster_id_);
  }

  // int32 vertex_id = 1;
  if (this->_internal_vertex_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vertex_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabeledVertexEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LabeledVertexEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabeledVertexEntry::GetClassData() const { return &_class_data_; }


void LabeledVertexEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LabeledVertexEntry*>(&to_msg);
  auto& from = static_cast<const LabeledVertexEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.LabeledVertexEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.features_.MergeFrom(from._impl_.features_);
  if (from._internal_has_cluster_id()) {
    _this->_internal_mutable_cluster_id()->::classifierpb::ClusterID::MergeFrom(
        from._internal_cluster_id());
  }
  if (from._internal_vertex_id() != 0) {
    _this->_internal_set_vertex_id(from._internal_vertex_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabeledVertexEntry::CopyFrom(const LabeledVertexEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.LabeledVertexEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledVertexEntry::IsInitialized() const {
  return true;
}

void LabeledVertexEntry::InternalSwap(LabeledVertexEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.features_.InternalSwap(&other->_impl_.features_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LabeledVertexEntry, _impl_.vertex_id_)
      + sizeof(LabeledVertexEntry::_impl_.vertex_id_)
      - PROTOBUF_FIELD_OFFSET(LabeledVertexEntry, _impl_.cluster_id_)>(
          reinterpret_cast<char*>(&_impl_.cluster_id_),
          reinterpret_cast<char*>(&other->_impl_.cluster_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LabeledVertexEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[7]);
}

// ===================================================================

class LabeledVertices::_Internal {
 public:
};

LabeledVertices::LabeledVertices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:classifierpb.LabeledVertices)
}
LabeledVertices::LabeledVertices(const LabeledVertices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LabeledVertices* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:classifierpb.LabeledVertices)
}

inline void LabeledVertices::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LabeledVertices::~LabeledVertices() {
  // @@protoc_insertion_point(destructor:classifierpb.LabeledVertices)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LabeledVertices::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void LabeledVertices::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LabeledVertices::Clear() {
// @@protoc_insertion_point(message_clear_start:classifierpb.LabeledVertices)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabeledVertices::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .classifierpb.LabeledVertexEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LabeledVertices::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:classifierpb.LabeledVertices)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .classifierpb.LabeledVertexEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:classifierpb.LabeledVertices)
  return target;
}

size_t LabeledVertices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:classifierpb.LabeledVertices)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .classifierpb.LabeledVertexEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabeledVertices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LabeledVertices::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabeledVertices::GetClassData() const { return &_class_data_; }


void LabeledVertices::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LabeledVertices*>(&to_msg);
  auto& from = static_cast<const LabeledVertices&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:classifierpb.LabeledVertices)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabeledVertices::CopyFrom(const LabeledVertices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:classifierpb.LabeledVertices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledVertices::IsInitialized() const {
  return true;
}

void LabeledVertices::InternalSwap(LabeledVertices* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabeledVertices::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_classifier_2eproto_getter, &descriptor_table_classifier_2eproto_once,
      file_level_metadata_classifier_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace classifierpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::classifierpb::ClusterID*
Arena::CreateMaybeMessage< ::classifierpb::ClusterID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::ClusterID >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::TrainingDatasetEntry*
Arena::CreateMaybeMessage< ::classifierpb::TrainingDatasetEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::TrainingDatasetEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::TrainingDataset*
Arena::CreateMaybeMessage< ::classifierpb::TrainingDataset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::TrainingDataset >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::SupportVertexEntry*
Arena::CreateMaybeMessage< ::classifierpb::SupportVertexEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::SupportVertexEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::SupportVertices*
Arena::CreateMaybeMessage< ::classifierpb::SupportVertices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::SupportVertices >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::VertexToLabelEntry*
Arena::CreateMaybeMessage< ::classifierpb::VertexToLabelEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::VertexToLabelEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::VerticesToLabel*
Arena::CreateMaybeMessage< ::classifierpb::VerticesToLabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::VerticesToLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::LabeledVertexEntry*
Arena::CreateMaybeMessage< ::classifierpb::LabeledVertexEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::LabeledVertexEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::classifierpb::LabeledVertices*
Arena::CreateMaybeMessage< ::classifierpb::LabeledVertices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::classifierpb::LabeledVertices >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
